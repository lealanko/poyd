Information : 
                Trees:
                  Storing 0 trees 
Information : 
                Trees:
                  Storing 0 trees 
Information :
build :
  
    Description
      
      Builds Wagner trees  . The arguments of the command build specify the
      number of trees to be generated and the order in which terminals are
      added during a singe tree building procedure. The sequence of taxon
      addition can either be random or correspond to the order of terminals
      as they are listed in the first imported datafile. During tree
      building, POY reports in the Current Job window of the ncurses
      interface which of the terminal addition strategies is currently used.
      Building multiple trees with a randomized addition of terminals allows
      for the evaluation of many more possible tree topologies and generates
      a diversity of trees for subsequent analysis. By default POY replaces
      the trees stored in memory with those generated in a subsequent build.
      For example, executing build (10) followed by build (20) will replace
      10 trees generated during the first build with 20 new trees. However,
      it might be desirable (for example, if computer memory were limited) to
      generate a large number of trees by appending trees from multiple
      separate builds. To keep trees from consecutive builds, a tree output
      file must be specified using  report(see help (report)) that must
      precede the subsequent build command. This will produce a file
      containing the trees appended from all builds. Alternatively, trees
      from different builds can be redirected to separate files if different
      file names are specified. The command build is also used as an argument
      for the command calculate_support . 
    
    
    Arguments
      
      
        as_is 
        Indicates that in one of the trees to be built, the terminals are
        added in the order in which they appear in the first imported
        datafile, and all others are built using a random addition sequence. 
      
        branch_and _bound[: FLOAT ]
        Calculates the exact solution using the branch and bound algorithm  .
        By default only one optimal tree is kept but the number of optimal
        trees to be retained can be specified by the argument trees. The
        optional float value specifies the bound (either tree cost or
        likelihood score. Instead of building a tree the default heuristic
        method, 
      
        constraint [: STRING ]
        Builds trees using the set of constraints contained in the input
        file. If no input file is provided, the constraint is calculated as
        the strict consensus of the trees held in memory. Every tree built
        using this method is subjected to the same randomization as wagner
        builds within each constraint. 
      
        random 
        Generate a tree at random. All possible trees have equal probability. 
      
        randomized 
        Indicates that terminals are added in random order on every Wagner
        tree built. 
      
        trees : INTEGER 
        The integer value specifies the number of independent, individual
        Wagner tree builds. The label trees is optional: it is sufficient to
        specify only the integer without the trees label. Therefore,
        build (5) is equivalent to build (trees:5) . Note that trees is also
        used as an argument of the command  swap(see help (swap)) but with
        different meaning. The value 0 generates no trees, but, unlike other
        values, it retains all trees in memory instead of eliminating them.
        This is useful, for example, in the bremer(see help (bremer)) support
        calculation, where instead of generating new trees per each node, the
        searches are performed on the trees in the neighborhood of the
        current trees in memory. 
      
        INTEGER 
        The integer argument specifies the number of independent, individual
        Wagner tree builds. This is a shortcut of the argument trees. 
      
        of_file : STRING 
        Imports tree file included in the file path of the argument. This
        command is useful for importing starting trees for calculating
        bremer(see help (bremer)) support. In other contexts the command
        read(see help (read)) is used. 
      
        STRING 
        This is a shortcut of the argument of_file. 
      
        all 
        Turns off all preference strategies to make a join, simply try all
        possible join positions for all terminals added. 
      
    
    
    Defaults
      
      trees:10, randomized 
      By default, POY will build 10 trees using a random addition sequence
      for each of them. 
    
    Examples
      
      build (20) 
        Builds 20 Wagner trees randomizing the order of terminal addition
        (note that since random is the default, it is not written ). 
      
      build (trees:20, randomized) 
        A more verbose version of the previous example. By default a build is
        randomized, but in this case the addition sequence is explicitly set.
        For the total number of trees, instead of simply specifying 20, we
        use the label trees (this might be desirable to improve a script's
        readability ). 
      
      build (15, as_is ) 
        Builds the first Wagner tree using tree using the order of terminals
        in as they are listed in the first imported datafile and generates
        the remaining 14 trees using a random addition sequence. 
      
      build (branch_and _bound, trees:5) 
        Builds trees using branch_and _boundmethod and keeps up to 5 optimal
        trees in memory. 
      
      
    
  
Information :
calculate_support :
  
    Description
      
      Calculates the requested support values. POY implements support
      estimation based on resampling methods (Jackknife and Bootstrap) and
      Bremer support. The Jackknife and Bootstrap support values are computed
      as frequencies of clades recovered in strict consensus trees built in
      each resampling iteration. The consensus trees are based on best trees
      recovered in each replicate with zero-length branches collapsed. All
      the arguments of calculate_support command are and their order is
      arbitrary. 
      The placement of the root affects calculation of the support values.
      Therefore, it is critical to define the root prior to executing
      calculate_support . See the description of the command set(see help
      (set)) on how to specify the root. POY does not report support values
      by default; the output of support values must be requested using 
      report(see help (report)) . This is particularly important for
      Jackknife and Bootstrap support values, as these sampling techniques do
      not require the existence of trees in memory. Therefore, it is possible
      to perform the sampling for support values before the tree of interest
      has been found. 
      It is critical to understand that in the context of dynamic homology,
      the characters being sampled during pseudoreplicates are entire
      sequence fragments, not individual nucleotides. Consequently, the
      bootstrap and jackknife support values calculated for dynamic
      characters are not directly comparable to those calculated based on
      static character matrices. If it is desirable to perform character
      sampling at the level of individual nucleotides, the dynamic characters
      must be transformed into static characters using static_approx argument
      of the command  transform(see help (transform)) prior to executing
      calculate_support . Alternatively, an output file in the Hennig86
      format can be generated based on an implied alignment using 
      phastwinclad(see help (phastwinclad)) that can subsequently be analyzed
      using other programs such as NONA or TNT. It is important to remember
      that the local optimum for the dynamic homology characters can differ
      from that for the static homology characters based on the same sequence
      data. Therefore, in calculating support values by sampling individual
      nucleotides based on the static homology data (obtained by
      static_approx) can produce a discrepancy in tree costs when compared to
      the tree cost based on the original dynamic homology data. Therefore,
      it is recommended to perform an extra round of swapping on the
      transformed data to insure that the local maximum is reached for the
      static homology characters prior to calculating support values. 
    
    
    Arguments
      
      
      Support calculation methods 
        The following commands allow to choose among several methods for
        calculating support.
        
          bremer 
          Calculates Bremer support  for each tree in memory by performing
          independent searches for each node. The parameters for the searches
          can be modified using arguments described under Search strategy.
          The argument bremer takes no values. 
        
          bootstrap [: INTEGER ]
          Calculates Bootstrap support  . The integer value specifies the
          number of resampling iterations (pseudoreplicates ). If the value
          is omitted, POY performs 5 pseudoreplicates by default. 
        
          jackknife [: ([ argument list ]) ]
          Calculates Jackknife support  using the sampling parameters
          specified by the arguments. The arguments of jackknife are optional
          and their order is arbitrary. If both values are omitted, POY uses
          the default values of the arguments. 
        
          
            remove : FLOAT 
            The value of the argument remove specifies the percentage of
            characters being deleted during a pseudoreplicate. The default of
            remove is 36 percent. 
          
            resample : INTEGER 
            The value of the argument resample specifies the number of
            resampling pseudoreplicates. The default of resample is 5. 
          
      
      Search strategy 
        The calculation of the support values requires a local search, that
        is performed under the default settings unless the values of the
        following arguments are specified.
        
          build 
          For calculating Bremer support, the integer value of build
          specifies the number of independent Wagner tree builds per node.
          The integer value 0 (build:0) specifies that Bremer support values
          are calculated on the starting trees currently in memory, rather
          than on newly generated trees. Alternatively, the initial trees for
          calculating Bremer support can be imported using the argument
          of_file of the command  build(see help (build)) . For calculating
          Jackknife and Bootstrap supports, it specifies the number of Wagner
          tree builds per pseudoreplicate. Single best trees from all
          psudoreplicates are used to calculate the support values. If
          multiple best trees are recovered in a pseudoreplicate, only one of
          them is selected at random. If build is omitted from the argument
          list of calculate_support , POY a single random addition Wagner
          tree per pseudoreplicate by default. This is equivalent to
          build (trees:1, randomized) . See build(see help (build)) for a
          detailed discussion of arguments of the command build . 
        
          swap 
          Specifies the method and parameters for local tree search. If the
          argument swap is omitted, the search is performed under the default
          settings of the command  swap(see help (swap)) . 
        
      
    
    
    Defaults
      
      bremer, build (trees:1, randomized ), swap (trees:1) 
      By default POY will calculate the bremer support for each tree in
      memory node by node. However, if no trees loaded in memory, executing
      the command calculate_support () does not have any effect. 
    
    Examples
      
      calculate_support (bremer) 
        Calculates Bremer support values by performing independent searches
        for every node. This is equivalent to executing 
         calculate_support () (the default setting .) 
      
      calculate_support (bremer, build (trees:0 ), swap (trees:2 )) 
        Calculates Bremer support values by performing swapping on each tree
        in memory for every node and keeping up to two best trees per search
        round. 
      
      calculate_support (bremer, build (of_file:"new _trees"), swap (tbr,
      trees:2 )) 
        Calculates Bremer support values by performing TBR swapping on each
        tree in the file new_trees located in the current working directory
        for every node and keeping up to two best trees per search round. 
      
      calculate_support (bootstrap) 
        Calculates Bootstrap support values under default settings. This
        command is equivalent to
        calculate_support (bootstrap:5, 
         build (trees:1, randomized ), swap (trees:1 )) . 
      
      calculate_support (bootstrap:100, build (trees:5 ), 
       swap (trees:1 )) 
        Calculates Bootstrap support values performing 1 random resampling
        with replacement, followed by 5 Wagner tree builds (by random
        addition sequence) and swapping these trees under the default
        settings of the command swap, and keeping 1 minimum-cost tree. The
        procedure is repeated 100 times. 
      
      calculate_support (jackknife: (resample:1000 ), 
       build (), swap (tbr, trees:5 )) 
        Calculates Jackknife support values randomly removing 36 percent of
        the characters (the default of jackknife ), building 10 Wagner trees
        by random addition sequence (the default of build ), swapping these
        trees using tbr, and keeping up to 5 minimum-cost tree in the final
        swap. The procedure is repeated 1000 times. 
      
      
    
    See Also
      
      report supports graphsupports 
    
  
Information :
clear_memory :
  
    Description
      
      Frees unused memory. Rarely needed, this is a useful command when the
      resources of the computer are limited. The arguments are optional and
      their order is arbitrary. 
    
    
    Arguments
      
      
        m 
        Includes the alignment matrices in the freed memory. 
      
        s 
        Includes the unused pool of sequences in the freed memory. 
      
    
    
    Defaults
      
      
      By default POY clears all memory except for the pool of unused
      sequences and the matrices used for the alignments. 
    
    Examples
      
      clear_memory (s) 
        This command frees memory including all alignment matrices but
        keeping unused pool of sequences. 
      
      
    
    See Also
      
      wipe 
    
  
Information :
cd :
  
    Description
      
      Changes the working directory of the program. This command is useful
      when datafiles are contained in different directories. It also
      eliminates the need to enter to the working directory before beginning
      a POY session. To display the path of the current directory, use the
      command  pwd(see help (pwd)) . 
    
    
    Arguments
      
      
        STRING 
        The value specifies a path to a directory. 
      
    
    Examples
      
      cd ("/Users/username/docs/poyfiles") 
        Changes the current directory to the directory 
         /Users/username/docs/poyfiles. 
      
      
    
    See Also
      
      pwd 
    
  
Information :
echo :
  
    Description
      
      Prints a the content of the string argument into a specified type of
      output. Several types of output are generated by POY which are
      specified by the ``output class'' of arguments (see below ). If no
      output-class arguments are specified, the commands does not generate
      any output. 
    
    
    Arguments
      
      
      Output class 
        
          error 
          Outputs the specified string as an error message (stder in the flat
          interface ). 
        
          info 
          Outputs the specified string as an information message (stder in
          the flat interface ). 
        
          output [: STRING ]
          Reports a specified string on screen or to a file, if the filename
          string (enclosed in parentheses) is specified following output and
          separated from it by a colon, ``:''. 
        
      
    
    Examples
      
      echo ("Building with indel cost 1", info) 
        Prints to the output window in the ncurses interface and to the
        standard error in the flat interface the message Building with indel
        cost 1. 
      
      echo ("Final trees", output:"trees. txt") 
        Prints the string Final trees to the file trees. txt. 
      
      echo ("Initial trees", output) 
        Prints the string Initial trees to the output window in the ncurses
        interface, and to the standard output in the flat interface. 
      
      
    
    See Also
      
      report 
    
  
Information :
exit :
  
    Description
      
      Exits a POY session. This command does not have any arguments. 
      exit is equivalent to the command quit . 
      To interrupt a process without quitting a POY session, use Control-C.
      It aborts a currently running operation but keeps all the previously
      accumulated data in memory. It does not abort the current session
      permitting entering new command and continuing the session. 
    
    Examples
      
      exit () 
        Quits the program. 
      
      
    
    See Also
      
      quit 
    
  
Information :
fuse :
  
    Description
      
      Performs Tree Fusing on the trees in memory. Tree Fusing is a genetic
      algorithm technique that allows the escaping the local optimum by
      exchanging clades with identical composition of terminals between pairs
      of trees. Only one pair of trees is evaluated during a single
      iteration. The size of the clades being exchanged is not determined. 
    
    
    Arguments
      
      
        keep : INTEGER 
        Specifies the maximum number of trees to be kept between iterations.
        By default, the number of trees retained is the same as the number of
        starting trees. 
      
        iterations : INTEGER 
        Specifies the number of iterations of tree fusing to be performed.
        The number of iterations is effectively the number of pairwise clade
        exchanges. The default number of iterations is four times the number
        of retained trees (as specified by keep ). 
      
        replace : argument 
        Specifies the method for tree selection. Acceptable values are: 
        
          [better] Replaces parent trees with trees of better cost produced
          during a fusing iteration. [best] Keeps a set of trees of the best
          cost regardless their origin. 
        The default is best. 
      
        swap 
        Specifies tree swapping strategy to follow each iteration of tree
        fusing. No swapping is performed under default settings. See the
        command  swap(see help (swap)) . 
      
    
    
    Defaults
      
      replace:best 
      By default POY performs fusing keeping the same number of trees per
      iterations as the number of the starting trees. The number of
      iterations is four times the number starting trees. During the
      procedure, only the best trees are retained. No swapping is performed
      subsequent to tree fusing. 
    
    Examples
      
      fuse (iterations:10, replace:best, keep:100 swap ()) 
        This command executes the following sequence of operations. In the
        first iteration, clades of the same composition of terminals are
        exchanged between two trees from the pool of the trees in memory. The
        cost of the resulting trees is compared to that of the trees in
        memory and a subset of the trees containing up to 100 trees of best
        cost is retained in memory. These trees are subjected to swapping
        under the default settings of swap . The entire procedure is repeated
        nine more times. 
      
      fuse (swap (constraint )) 
        This command performs tree fusing with modified settings for swapping
        that follows each iteration. Once a given iteration is completed, a
        consensus tree of the files in memory is computed and used as
        constraint file for subsequent swapping (see the argument
        constraint(see help (constraint)) of the command swap ). 
      
      
    
    See Also
      
      swap 
    
  
Information :
help :
  
    Description
      
      Reports the requested contents of the help file on screen. 
    
    
    Arguments
      
      
        LIDENT 
        Specifies a command name, the help for which is requested. 
      
        STRING 
        Specified the expression (treated as an emacs regular expression ),
        every occurrence of which in the help file is reported on screen. 
      
    
    
    Defaults
      
      
      By default POY displays the entire content of the help file on screen 
    
    Examples
      
      help (swap) 
        Prints the description of the command swap in the POY Output window
        of the ncurses interface or to the standard error in the flat
        interface. 
      
      help ("log") 
        Finds every command with text containing the substring log and prints
        them in the POY Output window of the ncurses interface or to the
        standard error in the flat interface. 
      
      
    
  
Information :
inspect :
  
    Description
      
      Retrieves the description of a POY file. If the description was not
      specified by the user, inspect reports that the description is not
      available. If the file is not a proper POY file format, a message is
      printed out in the POY Output window of the ncurses interface or the
      standard error of the flat interface. POY files are not intended for
      permanent storage: they are recommended for temporary storage of a POY
      session, checkpointing the current state of the search (to avoid losing
      data in case the computer or the program fails ), or reporting bugs.
      POY also automatically generates POY files in cases of terminating
      errors (important exceptions are out-of-memory errors ). 
    
    Examples
      
      inspect ("initial_search . poy") 
        Prints the description of the POY file initial_search. poy (located
        in the current working directory) in the POY Output window of the
        ncurses interface or to the standard error in the flat interface ).
        If the file was saved using the command
        save ("initial_search . poy", "Results of Total Analysis") , then the
        output message is: Results of Total Analysis. 
      
      
    
    See Also
      
      save load cd pwd 
    
  
Information :
load :
  
    Description
      
      Reads and imports a POY file, the name of which (or its path if the
      file is not located in the current working directory) is included in
      the string argument. All the information of the current POY session
      will be replaced with the contents of the POY file. If the file is not
      in proper POY file format, an error message is printed in the POY
      Output window of the ncurses interface, or the standard error in the
      flat interface. See the description of the command save(see help
      (save)) on the POY file and its usage. POY files are not intended for
      permanent storage: they are recommended for temporary storage of a POY
      session, checkpointing the current state of the search (to avoid losing
      data in case the computer or the program fails ), or reporting bugs.
      POY also automatically generates POY files in cases of terminating
      errors (important exceptions are out-of-memory errors ). 
    
    Examples
      
      load ("initial_search . poy") 
        Reads and imports the contents of the POY file initial_search. poy,
        located in the current working directory (as printed by the pwd )
        command. 
      
      load ("/Users/andres/test/initial. poy") 
        Reads and imports the contents of the POY file initial. poy in the
        absolute path described by the argument. 
      
      
    
    See Also
      
      save inspect cd pwd 
    
  
Information :
perturb :
  
    Description
      
      Performs a search using a temporarily modified (``perturbed'')
      characters starting with the trees currently in memory. Once a local
      optimum is found for the perturbed characters, a new round of search
      using the original (non-modified) characters is performed.
      Subsequently, the costs of the initial and final trees are compared and
      the best trees are selected. If there are $n$ trees in memory prior to
      searching using perturb , then the $n$ best trees are selected at the
      end. For example, if there are 20 trees currently in memory, 20
      individual perturb procedures will be performed (each procedure
      starting with one of the 20 initial trees ), and 20 final trees are
      produced. This command allows the escape from a local optimum in the
      tree space by perturbing the character space (hence the name ). The
      arguments specify the type of perturbation (ratchet, resample, and
      transform ), the parameters of the subsequent search (swap ), and the
      number of iterations of the perturb operation (iterations ). No new
      Wagner trees are generated following the perturbation of the data; the
      search is performed by local branch swapping (specified by swap ). If
      perturb is executed with no trees in memory, an error message is
      generated. The arguments of perturb are optional and their order is
      arbitrary. 
    
    
    Arguments
      
      
        iterations : INTEGER 
        Repeats (iterates) the perturb procedure for the number of times
        specified by the integer value. The number of iterations is reported
        in the Current Job window of the ncurses interface and to the
        standard error in the flat interface. 
      
        ratchet [: (FLOAT, INTEGER) ]
        Perturbs the data by implementing a variant of the parsimony ratchet 
        . For unaligned data, ratchet randomly selects and reweighs a
        fraction of sequence fragments (not individual nucleotides) specified
        by the float (decimal) value, upweighted by a factor specified by the
        integer value (severity ). For static matrices, such as those
        obtained using the command  transform(see help (transform)) ,
        ratchet randomly selects and reweights individual nucleotide
        positions (column vectors ), as in Nixon's original implementation.
        Under default settings, ratchet selects 25 percent of characters and
        upweights them by a factor of 2. Unless ratchet is performed under
        default settings (that does not require the specification of the
        fraction of data to be reweighted and the severity value ), both
        values must be specified in the proper order and separated by a
        comma. This argument is only used as an argument for perturb . 
      
        resample : (INTEGER, LIDENT) 
        Resamples the data (characters or terminals) in random order with
        replacement. The resample string consists of an integer value
        specifying the number of items to be resampled (followed by a comma)
        and a lident value specifying whether characters or terminals (values
        characters and terminals , respectively) are to be resampled.
        Specifying both values is required. No default settings are available
        for resample. This command is only used as an argument of perturb . 
      
        swap 
        Specifies the method of branch swapping for a local tree search based
        on perturbed data. If the argument swap is omitted, the search is
        performed under default settings of the command  swap(see help
        (swap)) . 
      
        transform 
        Specifies a type of character transformation to be performed before
        executing a perturb procedure. See the command  transform(see help
        (transform)) for the description of the methods of character type
        transformations and character selection. 
      
    
    
    Defaults
      
      ratchet, swap (trees:1) 
      By default, POY performs the ratchet procedure under default settings. 
    
    Examples
      
      perturb (resample: (50, terminals ), iterations:10) 
        Performs 10 successive repetitions of random resampling of 50
        terminals with replacement. Branch swapping is performed using
        alternating SPR and TBR, and and keeping 1 minimum-cost tree (the
        default of swap ). 
      
      perturb (iterations:20, ratchet: (0. 18, 3 )) 
        Performs 20 successive repetitions of a variant of the ratchet (see
        above) by randomly selecting 18 percent of the characters (sequence
        fragments) and upweighting them by a factor of 3. Branch swapping is
        performed using alternating SPR and TBR, and keeping 1 optimal tree
        (the default of swap ). 
      
      perturb (iterations:1, transform (tcm: (4, 3 ))) 
        Transforms the cost regime of all applicable characters (i. e.
        molecular sequence data) to the new cost regime specified by
        transform (cost of substitution 4 and cost of indel 3. Subsequently a
        single round of branch swapping is performed using alternating SPR
        and TBR, and and keeping 1 optimal tree (the default of swap ). 
      
      perturb (ratchet: (0. 2, 5 ), iterations:25, swap (tbr, trees:5 )) 
        Performs 25 successive repetitions of a variant of the ratchet (see
        above) by randomly selecting 20 percent of the characters (sequence
        fragments) and upweighting them by a factor of 5. Branch swapping is
        performed using TBR and keeping up to 5 optimal trees in each
        iteration. 
      
      perturb (transform (static_approx ), ratchet: (0. 2, 5 ), 
       iterations:25, swap (tbr, trees:5 )) 
        Transforms all applicable (i. e. dynamic homology sequence
        characters) using transform into static characters. Therefore, the
        subsequent ratchet is performed at the level of individual
        nucleotides (as in the original implementation ), not sequence
        fragments. Thus, ratchet is performed by selecting 20 percent of the
        characters (individual nucleotides) and upweighting them by a factor
        of 5. Branch swapping is performed using TBR and keeping up to 5
        optimal trees in each iteration as in the example above. 
      
      
    
    See Also
      
      swap transform 
    
  
Information :
pwd :
  
    Description
      
      Prints the current working directory in the POY Output window of the
      ncurses interface and the standard error of the flat interface. The
      command pwd does not have arguments; the default working directory is
      the shell's directory when POY started. 
    
    Examples
      
      pwd () 
        This command will generate the following message: ``The current
        working directory is /Users/myname/datafiles/''. The reported actual
        directory will vary depending on the directory of the shell when POY
        started, or if it has been changed using the command cd () . 
      
      
    
    See Also
      
      cd 
    
  
Information :
quit :
  
    Description
      
      Exits POY session. This command does not have any arguments quit is
      equivalent to the command exit . 
    
    To interrupt a process without quitting a POY session, use Control-C. It
    aborts a currently running operation but keeps all the previously
    accumulated data in memory. It does not abort the current session
    permitting entering new command and continuing the session. 
    
    Examples
      
      quit () 
        Quits the program. 
      
      
    
    See Also
      
      exit 
    
  
Information :
read :
  
    Description
      
      Imports data files and tree files. Supported formats are ASN1, Clustal,
      FASTA, GBSeq, Genbank, Hennig86, Newick, NewSeq, Nexus, PHYLIP, POY3,
      TinySeq, and XML. Filenames should be enclosed in quotes and if
      multiple filenames are specified, they must be separated by commas.
      read automatically detects the type of the input file. read can use
      wildcard expressions (such as *) to refer to multiple files in a single
      step: for example, read ("biv*") imports all data files the names of
      which start with biv or read ("*. ss") imports all files with the
      extension . ss (given that the data files are in the current directory
      ). Specifying filename (s) is obligatory; an empty argument string,
      read () , results in no data being read by POY. The list of imported
      files and their content can be reported on screen or to a file using
      report (data) . If a file is loaded twice, POY issues an error message
      but this will not interfere with subsequent file loading and execution
      of commands. POY automatically reports in the POY Output window of the
      ncurses interface or to the standard error in the flat interface the
      names of the imported files, their file type, and a brief description
      of their contents. A more comprehensive report on the contents of the
      imported files can be requested (either on screen or to a file) using
      the argument data of the command report(see help (report)) . 
      Although POY recognizes multiple data file formats, it does not
      interpret all of their contents. Instead, it will recognize and import
      only character data and ignore other content (such as blocks of
      commands, etc. ). For certain data file formats, POY will interpret
      additional information as detailed for each file type below. It is
      important, however, to verify that the data was interpreted properly
      (using the command report ). 
      Unlike many phylogenetic programs, POY does not clear the memory buffer
      upon reading a second file. Instead, any subsequently read files will
      be added to the total data being analyzed. If a new taxon appears in a
      file, then it will be assigned missing data for all previously loaded
      characters. If a taxon does not appear in a file, it will be assigned
      missing data for the characters appearing on it. If the user wants to
      eliminate any data read, and then read a new file to be analyzed alone,
      the wipe () command must be issued first. 
      If one of the terminal names in an imported molecular file contains a
      space, `` '', POY will issue a warning. This will also happen if a
      taxon name appears to match a nucleotide sequence. If one of the
      terminal names in an imported molecular file contains an or a
      percentage symbol, the file will not be loaded as it may cause the
      program to crash when reporting results. 
    
    
    Arguments
      
      
      Data file types 
        To import data files, individual data file names must be included in
        the list of read arguments, enclosed in quotes, and separated by
        commas. If no data file types are specified, the types of the
        imported files are recognized automatically. To specify the data
        type, an additional argument that explicitly denotes the data type,
        is included; it is followed by a colon (``:'') and then enclosed in
        parentheses, the list of data file names, separated by commas and
        enclosed in quotes. This format prevents any ambiguity in importing
        multiple data file types simultaneously (i. e. included in an
        argument list of a single read ) command.
        
          STRING 
          Reads the file specified in the path included in the string
          argument. A path can be absolute or relative to the current working
          directory (as printed by pwd () ). The file type is recognized
          automatically. Molecular files are assumed to contain nucleotide
          sequences; valid files to read using this command are: tree files
          using parenthetical notation (newick, POY trees ), Hennig86 files,
          Nona files, Sankoff character files as used in POY 3, FASTA files
          (and virtually any file generated by Genbank ), and NEXUS files.
          Only taxon names, trees, characters, and cost regimes will be
          imported from each one of this files, no other commands are
          currently recognized. 
        
          aminoacids : (STRING list) 
          Specifies that the data listed in the string argument are amino
          acid sequences in FASTA format. 
        Currently, IUPAC ambiguity codes for aminoacids are not supported and
        inputing files that contain aminoacid data with ambiguities results
        in an error message. 
        
          annotated : (STRING list) 
          Specifies that the data listed in the string argument are
          chromosomal sequences with pipes (`` $ '') separating individual
          loci. This data type allows for locus-level rearrangements
          specified by the argument dynamic_pam(see help (dynamic_pam)) of
          the command transform(see help (transform)) . Locus homologies are
          determined dynamically, but based on annotated regions  . 
        
          breakinv : (STRING, STRING, [orientation: BOOL, init3D: BOOL ]) 
          An enhancement of the data file type custom_alphabet allowing
          rearrangement events specified using dynamic_pam () .
          Syntactically, breakinv data type is identical to custom_alphabet
          data type. 
        
          chromosome : (STRING list) 
          Specifies that the data in the files listed in the string argument
          are chromosomal sequences without predefined locus boundaries.
          Specifying that imported sequences are chromosome type data enables
          the application of parameter options that optimize chromosome-level
          events such as rearrangements, inversions, and large-scale
          insertions and deletions (including duplications ). These parameter
          options (e. g. inversion cost) are specified using the argument
          dynamic_pam in the command  transform(see help (transform)) .
          Unlike when using annotated data type, both locus-level and
          nucleotide-level homologies are determined dynamically  . If
          chromosome sequences were imported as nucleotide type data, they
          can be converted to chromosome type data using the argument
          seq_to_chrom of transform(see help (transform)) . 
        
          custom_alphabet : (STRING, STRING, [orientation: BOOL, init3D: BOOL
          ]) 
          Reads the data in the user-defined alphabet format. The first
          string argument is the name of a datafile that contains
          custom-alphabet sequences in FASTA format. The characters can be
          (but are not required to be) separated by spaces. The second string
          argument is the name of a custom-alphabet input file that contains
          two parts: an alphabet itself, where the alphabet elements are
          separated by spaces, and a transformation cost matrix. The elements
          in an alphabet can be letters, digits, or both, as long as one
          element is not a prefix of another (``prefix-free'' ). For example,
          the following pairs of custom-alphabet elements are not valid
          because the first is a prefix of the second (which would prevent
          the proper parsing of an input file) : AB and ABBA or 122 and 122X.
          The transformation cost matrix contains the rows and columns in
          which the positions from left to right and top to bottom correspond
          to the sequence of the elements as they are listed in the alphabet.
          Aa extra rightmost column and lowermost row correspond to a gap. It
          is impotant that the cost matrix must be symmetrical. Here is an
          example of a valid custom alphabet input file: alpha beta gamma
          delta 
           0 2 1 2 5 
           2 0 2 1 5 
           1 2 0 2 5 
           2 1 2 0 5 
           5 5 5 5 0 In this example, the cost of transformation of alpha
          into beta is 2, and cost of a deletion or insertion of any of the
          four elements costs 5. An example of a corresponding input file:
          $>$Taxon1 
           alphabetagammadelta 
           $>$Taxon2 
           alphabetabetagammadelta 
           $>$Taxon3 
           alphabetabetadelta The optional arguments of custom_alphabet
          include orientation and init3D, both of which require obligatory
          boolean values. The argument orientation allows the user to specify
          the orientation of custom-defined alphabet characters. The tilde
          symbol (``$ ) preceding an alphabet character indicates the
          negative orientation. The options are orientation:true or
          orientation:false . The default option is true. The argument init3D
          indicates that if program will calculate in advance the medians for
          all triplets of characters (a, b, c ). The options are init3D:true
          or init3D:false. The default option is true. custom_alphabet can be
          transformed into breakinv using transform () . 
        
          genome : (STRING list) 
          Specifies that the data listed in the string argument are
          multichromosomal nucleotide sequences with the `` sign separating
          individual chromosomes. This data type allows for chromosome-level
          rearrangements specified by the argument dynamic_pam(see help
          (dynamic_pam)) of the command transform(see help (transform)) .
          Chromosome homologies are determined dynamically using distance
          threshold levels specified by the argument chrom_hom(see help
          (chrom_hom)) of transform(see help (transform)) . 
        
          nucleotides : (STRING list) 
          Specifies that the data in the list of files hold nucleotide
          sequences in FASTA format. 
        By default, upon importing prealigned sequence data, all the gaps are
        removed and the sequences are treated as dynamic homology characters.
        To preserve the alignment the data must be imported using the
        prealigned argument of the command read . 
        
          prealigned : (read argument, tcm: STRING) 
          Specifies that the input sequences are prealigned and should be
          assigned the transformation cost matrix from the input file
          specified by the string argument. (See tcm .) 
        
          prealigned : (read argument, tcm: (INTEGER, INTEGER )) 
          Specifies that the input sequences are prealigned and should be
          assigned substitution and indel costs as defined by the tcm
          argument. (See tcm .) 
        
      
    
    
    Defaults
      
      
      If no data files are specified, POY does nothing. If however, data
      files are listed but character type is not indicated, POY automatically
      detects data file types and interprets sequence files as
      nucleotides-type data. 
    
    Examples
      
      read ("/Users/andres/data/test. txt") 
        Reads the file test. txt located in the path ``/Users/andres/data/''. 
      
      read ("28s. fas", "initial_trees . txt") 
        Reads the file 28s. fas and loads the trees in parenthetical notation
        of the file initial_trees. txt. 
      
      read ("SSU*", "*. txt") 
        Reads all the files the names of which start with SSU, and all the
        files with the extension . txt. The types of the datafiles are
        determined automatically. 
      
      read (nucleotides: ("chel. FASTA", "chel2. FASTA" )) 
        Reads the files chel. FASTA and chel2. FASTA, containing nucleotide
        sequences. 
      
      read (aminoacids: ("a. FASTA", "b. FASTA", "c. FASTA" )) 
        Reads the amino acid sequence files a. FASTA, b. FASTA, and c. FASTA. 
      
      read ("hennig1. ss", "chel2. FASTA", aminoacids: ("a. FASTA" )) 
        Reads the Hennig86 file hennig1. ss, the FASTA file chel2. FASTA
        containing nucleotide sequences (the default ), and the amino acid
        sequence file a. FASTA. 
      
      read (custom_alphabet: ("my_data" , "alphabet" ,)) 
        Reads the first file, my_data, containing data in the format of a
        custom alphabet, which is defined in the second input file, alphabet.
        By default, the forward and reverse orientation (orientation:true) of
        custom-alphabet characters is considered and prior calculation of
        medians for their triplets (init3D:true) is performed. 
      
      read (annotated: ("filea. txt", "fileb. txt" ), 
       chromosome: ("filec. txt" )) 
        Reads three files containing chromosome-type sequence data. The
        sequences in two files, filea. txt and fileb. txt, contain pipes (`` 
        $  '') separating individual loci, whereas the sequences in the
        third, are without predefined boundaries. 
      
      read (genome: ("mt_genomes" , "nu_genomes" ). 
        Reads two files containing genomic (multi-chromosomal) sequence data. 
      
      read (prealigned: ("18s. aln", tcm: (1, 2 )) 
        Reads the prealigned data file 18s. aln generated from the nucleotide
        file 18s. FASTA using the the transformation costs 1 for
        substitutions and 2 for indels. 
      
      
    
    See Also
      
      report 
    
  
Information :
rediagnose :
  
    Description
      
      Performs a reoptimization of the trees currently in memory. This
      function is only useful for sanity checks of the consistency of the
      data. Its main usage is for the POY developers. This command does not
      have arguments. 
    
    Examples
      
      rediagnose () 
        See the description of the command. 
      
      
    
  
Information :
recover :
  
    Description
      
      Recovers the best trees found during swapping, even if the swap was
      cancelled. This command functions only if a previously executed (in the
      current POY session) command swap included the argument recover(see
      help (recover)) . Otherwise, it has no effect. The trees imported by
      recover are appended to those currently stored in memory. Note that
      using recovered trees is not intended for temporary storage of trees;
      it is useful only as an intermediary operation in a given part of a POY
      session. When other commands that require clearing memory are executed
      (such as build , calculate_support , or another swap ), the trees
      stored by recover can no longer be retrieved. 
    
    Examples
      
      recover () 
        If the command swap (executed earlier in the current POY session)
        contained the argument recover, for example, swap (tbr, recover) ,
        this command will restore the best trees recovered during swapping. 
      
      
    
    See Also
      
      swap recover 
    
  
Information :
redraw :
  
    Description
      
      Redraws the screen of the terminal. This command is only used in the
      ncurses interface, other interfaces will ignore it. redraw clears the
      contents of the Interactive Console window but retains the contents of
      the other windows. It does not affect the state of the search and the
      data currently in memory. 
    
    Examples
      
      redraw () 
        See the description of the command. 
      
      
    
  
Information :
rename :
  
    Description
      
      Replaces the name (s) of specified item (s) (characters or terminals ).
      This command allows for substituting taxon names and helps merging
      multiple datasets without modifying the original datafiles. More
      specifically, it can be used, for example, (1) for housekeeping
      purposes when it is desirable to maintain long verbose taxon names
      (such as catalog or GenBank accession numbers) associated with the
      original datafiles but avoid reporting these names on the trees; (2) to
      provide a single name for a terminal in cases where the corresponding
      data is stored in different files under different terminal names; and
      (3) to simply change an outdated or invalid terminal name. The command
      consists of a terminal or character identifier followed by a comma and
      then by either a string containing a synonymy file or a pair (or pairs)
      of strings containing the names of items being renamed. 
    
    In order to change taxon names, the command rename must be executed
    before importing the datafiles (see command read(see help (read)) ) that
    contain character data the taxa to be renamed. 
    
    
    Arguments
      
      
      Identifiers 
        The identifiers specify whether terminals or characters are being
        renamed. An identifier must precede the subsequent arguments.
        
          characters 
          Specifies that the subsequently subsequently items to be renamed
          are characters. 
        
          terminals 
          Specifies that the subsequently subsequently items to be renamed
          are terminals. 
        
      
      Specifying items to be renamed 
        These arguments allow to specify the items to be renamed either
        individually (by using a pair of string arguments) or in a group (by
        importing a synonymy file. The latter is useful when there are
        multiple items to be renamed and/or when it is desirable to
        substitute a single name for multiple ones.
        
          STRING 
          Specifies the name of the file (a synonymy file) that contains the
          list of terminals or characters to be renamed. The synonymy file
          has the following structure: each line contains a list of synonyms
          (two or more) separated by spaces. The name of the item listed
          first is going to be substituted for all the subsequently listed
          names. Consider, for example, a two-line synonymy file below: alpha
          beta gamma 
           delta 1 
           When this file is imported, the items beta and gamma will be
          renamed as alpha and the item 1 will be renamed as delta in all
          subsequently imported datafiles. 
        
          (STRING, STRING) 
          Specifies the names of individual items to be renamed. The first
          item will be renamed as the second item: specifying ("alpha",
          "beta") would rename the character or taxon alpha to beta. To
          specify multiple pairwise name substitution, several name pairs can
          be listed: ("alpha", "beta" ),( "gamma", "delta" ). 
        
      
    
    Examples
      
      rename (terminals, "synfile") 
        This command will rename terminal names contained in the synonymy
        file synfile in all subsequently imported datafiles. 
      
      rename (terminals ,( "Mytilus_sp" , "Mytilus_edulis" )) 
        This command will rename terminal file Mytilus_sp as Mytilus_edulis
        in all subsequently imported datafiles. 
      
      
    
  
Information :
report :
  
    Description
      
      Outputs the results of current analysis or loaded data in the POY
      Output window of the ncurses interface, the standard output of the flat
      interface, or to a file. To redirect the output to a file, the file
      name in quotes and followed by a comma must be included in the argument
      list of report . All arguments for report are optional. 
    
    
    Arguments
      
      
      Reporting to files 
        
          STRING 
          Specifies the name of the file to which all the specific types of
          report outputs, designated by additional arguments, are printed. If
          no additional arguments are specified, the data, trees, and
          diagnosis are reported to that file by default. A string (text in
          quotes) argument is interpreted as a filename. Therefore,
          "/Users/andres/text" represents the file text in the directory
          /Users/andres (in Windows C:$ ). If no path is given, the path is
          relative to the current working directory as printed by pwd () .
          See the examples for the file outputting usage. 
        
      
      Terminals and characters 
        This set of arguments reports the current status of terminals and
        characters from the imported data files.
        
          compare : (BOOL, identifiers, identifiers) 
          If the boolean argument is set to false, the command reports the
          ratios of all pairwise distances to their maximum length for the
          characters specified by character identifiers. If the boolean
          argument is set to true, the complement sequences for the
          characters specified by the second identifier are computed prior to
          reporting the distance. 
        
          cross_references [: identifiers [: STRING ]]
          Reports a table with terminals being analyzed in rows, and the data
          files in columns. A plus sign (``+'') indicates that data for a
          given terminal is present in the corresponding file; a minus sign
          (``-'') indicates that it is not. cross_references is a very useful
          tool for visual representation of missing data. Under default
          settings, cross-references are reported for all imported datafiles.
          To report cross-references for some of the fragments within a given
          file, a single character, or a subset of characters, optional
          arguments must be specified. A combination of a character
          identifier (see command select(see help (select)) ) and the file
          names (specified in the the string value) is used to select
          specific datafiles to be cross-referenced. For example, if a
          command cross_references:names: ("file1") is executed, the output
          is produced only for file1. The argument cross_references:all
          generates a table that shows presence and absence of fragments
          contained within each file. (If each datafile contains a single
          fragment, executing cross_references:all is equivalent to executing
          cross_references .) By default, the cross-reference table is
          printed on screen or to an output file if specified. 
        
          data 
          Outputs a summary of the input data. More specifically, POY will
          report the number of terminals to be analyzed, a list of included
          terminals with numerical identification numbers, list of synonyms
          (if specified ), a list of excluded terminals, a number of included
          characters in each character-type category (i. e. additive,
          non-additive, Sankoff, etc.) with corresponding transformation cost
          matrix (if specified ), a list of excluded characters, and a list
          of input files. 
        
          seq_stats : identifiers 
          Outputs a summary of the sequences specified in the argument value,
          for all taxa. The summary includes the maximum, minimum, and
          average length and distance for all terminals. 
        
          terminals 
          Reports a list and number of terminals included and excluded for
          each input file. For information on including and excluding
          terminals use the command  select(see help (select)) . 
        
          treestats 
          Reports the number of hits per cost found by POY in a table format. 
        
      
      Trees 
        This set of arguments outputs tree representations in graphical,
        parenthetical, or ascii (simple text) formats. The arguments specify
        the types of tree outputs that include actual trees resulting from
        current searches or imported from files, their consensus trees, or
        trees displaying support values. The root can be specified using the
        command  set(see help (set)) . Most analyses produce more than a
        single tree and it is often desirable to report only some of them. To
        report particular trees (for instance all optimal trees,
        randomly-selected trees, or all unique trees, etc. ), first the
        command  select(see help (select)) must be applied to specify
        (select) the desired trees from all those stored in memory.
        
          all_roots 
          In a tree with $n$ vertices (and therefore $n - 1$ edges ),
          calculate the cost of the $n - 1$ rooted trees as implied by a root
          located in the subdivision vertex each edge in the unrooted tree in
          memory. 
        
          asciitrees [: collapse [: BOOL ]]
          Draws textual representations of trees stored in memory. The
          argument collapse collapses the zero length branches if the boolean
          value is true (the default); if the boolean value is false, the
          zero length branches are not collapsed. 
        
          clades 
          Output a set of Hennig86 files. Each file (named file. hen, where
          ``file'' is whatever string you pass to this function) contains
          information on each clade for one of the trees currently stored.
          This is similar to the utility jack2hen of POY3. 
        
          consensus [: INTEGER ]
          Reports the consensus of trees in memory in parenthetical notation.
          If no integer value is specified, a strict consensus is calculated 
          ; if integer value is specified, a majority rule consensus is
          computed, collapsing nodes with occurrence frequencies less than
          the specified integer  . If a value less than 51 is specified, POY
          will report an error. 
        
          graphconsensus [: INTEGER ]
          Same as consensus except for consensus trees are reported in
          graphical format, either in the ascii format on screen or in the
          postscript format if redirected to a file. 
        
          graphsupports [: argument ]
          This command outputs a tree with support values that have been
          previously calculated using the calculate_support(see help
          (calculate_support)) either on screen in ascii format, or, if
          specified, to a file in postscript format. The argument values are
          the same as for supports (i. e. bremer, jackknife, and bootstrap ). 
        
          graphtrees [: collapse [: BOOL ]]
          If POY has been compiled with graphics support, it will display a
          window in which you can browse graphical representations of all the
          trees in memory. When working in this window, using ``j'' and ``k''
          keys displays the previous or next tree respectively. Pressing
          ``q'' key returns to the Interactive Console window. The argument
          collapse will collapse the zero length branches if true, otherwise
          not (default is true .) 
        
          supports [: argument ]
          Outputs a parenthetical representation of a tree with the support
          values has previously been calculated using the command 
          calculate_support(see help (calculate_support)) (however see bremer
          ), either to the screen or to a file (if specified ). If no
          argument is given, all calculated support values are printed. The
          arguments bremer, jackknife, and bootstrap specify which type of
          support tree to report. bremer accepts an optional string argument
          (as in report (supports:bremer:"file. txt") , which specifies a
          file containing a list of trees and costs (as those generated by
          visited(see help (visited)) ), which should be used with their
          annotated cost to assign the bremer support values. If no input
          file is given, or if bootstrap or jackknife are needed, then the
          necessary information must have been calculated using
          calculate_support(see help (calculate_support)) . jackknife and
          bootstrap accept an optional argument with two possible values:
          individual or consensus. individual reports the support value for
          each tree held in memory: if there are a hundred trees stored in
          memory, for each one, the support values for each tree are
          reported. consensus generates a ``consensus'' tree, with the clades
          that have support higher than 50 percent. The default behavior,
          when no individual or consensus value is provided, is individual 
        
          trees : (argument list) 
          Outputs the trees in memory in parenthetical notation. The argument
          trees receives an optional list of values specifying the format of
          the tree that has to be generated. The valid optional arguments
          are: 
          
            
              total 
              Includes the total cost of a tree in square brackets after each
              tree 
            
              _cost
              Include the cost of every subtree in the tree in square
              brackets. 
            
              hennig 
              Prepends the tread command to the list of trees and separates
              them with a star; this format is suitable for hennig86, NONA,
              and TNT files. 
            
              newick 
              Outputs the trees in the Newick format, with the terminals
              separated with commas, and trees separated with semicolons. 
            
              margin : INTEGER 
              Sets the margin width of the generated trees. 
            
              nomargin 
              Outputs the trees in a single line. This is useful for some
              programs (such as TreeView) that cannot read trees broken in
              several lines. 
            
              collapse [: BOOL ]
              If true , zero length branches are collapsed (the default ),
              but if false then no branches are collapsed. 
            
      
      Implied alignments 
        This set of arguments will output implied alignment  .
        
          implied_alignments [: STRING ]
          Outputs the implied alignments of the specified set of characters
          in FASTA format. The (optional) value of the argument specifies the
          characters included in the output, using the same identifiers
          described for the character specification in the entry for the
          command  select(see help (select)) . If no characters are
          specified, then the implied alignment of all the sequence
          characters is generated. The output is reported on screen unless a
          name of an output file (in parentheses) is specified, preceding the
          command name and separated from it by a comma. This argument is
          synonymous with the argument ia. 
        
          ia [: STRING ]
          Synonym of implied_alignments. 
        
      
      Exporting static homology data 
        The following commands export the static homology characters
        currently in memory.
        
          phastwinclad 
          Produces a file in the Hennig86 format that contains the additive
          and nonadditive characters currently in memory. In order to export
          an implied alignment as a Hennig86 file, the characters must first
          be transformed into static characters using the transform command:
          
            transform (( all, static_approx )) 
             report ("report. ss", phastwinclad) 
          To generate a file that contains implied alignments only for a
          subset of fragments, an identifier must be included in the argument
          list of transform . For example,
          
            transform (( names: ("fragment_1" , "fragment_2" ), static_approx )) 
             report ("myfile. ss", phastwinclad) 
          will produce Hennig86 files only for fragment_1 and fragment_2. The
          resulting file can be imported into other programs, such as
          WinClada. This is equivalent to the phastwincladfile command in
          POY3. 
        
      
      diagnosis 
        This set of arguments will output the diagnosis.
        
          diagnosis 
          Outputs the diagnosis of each tree on screen or redirects it to a
          file, if specified. 
        
      
      Other arguments 
        
          ci 
          Calculates the ensemble consistency index (CI;  ) for additive and
          nonadditive characters. Dynamic homology characters are ignored in
          calculating the CI, therefore, the dynamic homology characters must
          be converted to static homology characters using the argument
          static_approx of the command transform(see help (transform)) . 
        
          memory 
          Reports on screen (or to file, if specified ), the statistics of
          the garbage collector. These statistics are only estimates in the
          native code version but exact in the bytecode version of POY. Note
          that the values consider only the OCaml-handled memory, the C data
          structures (sequences, additive, and non-additive characters ), are
          not included in the reported values. For a precise description of
          each memory parameter, see the Objective Caml documentation. 
        
          ri 
          Calculates the ensemble retention index (RI;  ) for additive and
          nonadditive characters. Dynamic homology characters are ignored in
          calculating the RI, therefore, the dynamic homology characters must
          be converted to static homology characters using the argument
          static_approx of the command transform(see help (transform)) . 
        
          script_analysis : STRING 
          Reports the order in which commands listed of the imported script
          (listed in the string argument) are going to be executed. Unlike
          executing commands sequentially (when entering commands
          interactively through the Interactive Console of the ncurses
          interface or the flat interface ), when commands are submitted in a
          script, POY determines the logical interdependency of operations
          and processes the commands in the order that yields the same
          results as if they were executed sequentially. This substantially
          optimizes the memory usage and improves parallelization. The
          colored output in the POY Output window of ncurses interface
          facilitates reading the output of script_analysis : red lines mark
          hard constraints that allow neither parallelization nor memory
          optimizations, blue lines mark nice constraints that allow the
          program to pipeline commands in parallel, and green lines mark
          fully parallelizable commands. When POY is compiled with parallel
          off, all the operations are sequential, therefore, each potentially
          parallel operation is done as sequential repetitions of the
          subscripts described in the output of the command, reducing memory
          consumption. 
        
          timer : STRING 
          Reports the value and the user time (in seconds) elapsed between
          two consecutive timer reports. The string value provides a label
          (typically a textual description) that precedes the time report in
          the output produced on screen (or redirected to a file, if
          specified ). The first timer report displays the time elapsed since
          the beginning of the POY session. This command is useful for
          monitoring the execution time of specific tasks. 
        
          xslt : (STRING, STRING) 
          Applies a user-defined stylesheet to the xml output. The first
          string is the filename of the output, the second string is the name
          of the stylesheet requested to generate it. 
        
      
    
    
    Defaults
      
      data, diagnosis, trees 
      By default, POY will print on screen the following items: the tree (s)
      in parenthetical notation with corresponding tree cost (s ), diagnosis
      of each tree, and a graphical representation on the tree (s) in ascii
      format. This output can be re-directed to a file by specifying a file
      name enclosed in quotation marks, for example: report ("filename") . 
    
    Examples
      
      report ("my_results" ) 
        This commands outputs the data, trees, and diagnosis (by default) to
        the file my_results. Because no path is specified, the file is
        located in the current working directory. 
      
      report (data) 
        This command displays on screen a list of included and excluded
        terminals, their names and codes, gene fragments, file names, and
        other relevant data. 
      
      report (treestats) 
        This example displays on screen the costs of all trees in memory and
        the number of trees for each cost. 
      
      report ("filename", treestats) 
        This commands outputs the costs of all trees in memory and the number
        of trees for each cost to a file filename. 
      
      report (cross_references:names ("file1", "file3" )) 
        This command produces a table showing presence and absence of data
        corresponding to all terminals contained in files file1 and file3.
        Because an output file is not specified, the table is displayed on
        screen. 
      
      report ("taxa", terminals) 
        This command generates a file taxa that contains the lists and
        numbers of excluded and included terminals for each of the previously
        imported datafiles. 
      
      report (trees) 
        This command displays on screen the trees in memory in parenthetical
        notation with zero-length branches collapsed and terminals separated
        by spaces. 
      
      report (trees: (total )) 
        This command produces the same output as the example above but also
        includes the total tree cost in square brackets following each tree. 
      
      report ("filename", trees: (collapse:false, newick )) 
        This command produces a file filename that contains all trees in
        Newick format with zero-length branches not collapsed. 
      
      report ("filename", graphtrees) 
        This command saves all trees in memory in postcript format to the
        file filename. ps. 
      
      report (asciitrees, "file1", trees: (newick, nomargin ), 
       "file2", graphtrees) 
        This command displays a tree in ascii format on screen and outputs to
        file1 trees with zero-length branches collapsed in Newick format in a
        single line (using no margin, the format compatible with TreeView ).
        It also writes to file2 the graphical representation of these trees
        in postscript format. 
      
      report ("hennig. ss", phastwinclad, trees: (hennig, total )) 
        Output all the static homology characters, including their cost
        regime, in the file hennig. ss ; then append to the same file the
        trees currently in memory using the Hennig format, including the
        total cost of each tree in square brackets. The generated
        hennig. ss is compatible with NONA, TNT, and Hennig86. 
      
      report ("my_results" , data, diagnosis, consensus, consensus:75,
      "consensus", graphconsensus) 
        This commands reports the requested types of outputs (emph i. e.
        reports on the data, diagnosis, and strict consensus and 75 percent
        majority-rule consensus trees in parenthetical notation) to the file
        my_results. In also outputs a strict consensus tree to the file
        consensus. 
      
      report (graphsupports, "bremertree", graphsupports:bremer) 
        This commands reports on screen all previously calculated support
        values placed at the nodes of ascii trees and outputs to file the
        bremertree only the tree (s) with bremer support values. 
      
      report (implied_alignments ) 
        This command reports the implied alignment of all dynamic homology
        characters on screen. 
      
      report ("align_file" , ia:names: ("SSU", "LSU" )) 
        This command generates the file align_file that contains the implied
        alignments only for characters contained in datafiles SSU and LSU. 
      
      report ("scipt1_analysis" , script_analysis:"/users/datafiles/script1 .
      poy") 
        This command produces the file scipt1_analysis that lists the
        commands from the input script file script1. poy in the order that
        optimizes parallelization and memory consumption. In this example the
        complete path (/users/datafiles/script1. poy) is provided, which is
        not necessary if the directory containing the file script1. poy has
        already been assigned using the command cd(see help (cd)) in the same
        POY session. 
      
      report ("swapping", timer:"swap end") 
        This command generates the file swapping that contains the string
        swap end followed by the number of seconds (in decimals) elapsed
        since the execution of the previous timer argument. 
      
      
    
    See Also
      
      calculate_support 
    
  
Information :
run :
  
    Description
      
      Runs POY script file or files. The filenames must be included in quotes
      and, if multiple files are included, they must be separated by commas.
      The script-containing files are executed in the order in which they are
      listed in the string argument. Executing scripts using run is useful in
      cases when operations take take long time or many scripts need to be
      executed automatically, for example, when conducting sensitivity
      analysis. There are no default settings of run . 
    
    Note that if any of the scripts contain commands exit or quit , POY will
    quit after executing that file. Therefore, if multiple files are
    submitted, only the last one must contain exit or quit . 
    
    Examples
      
      run ("script1", "script2") 
        This command executes POY command scripts contained in the files
        script1 and script2 in the same order as they are listed in the list
        of arguments of run . 
      
      
    
    See Also
      
      exit quit 
    
  
Information :
save :
  
    Description
      
      Saves the current POY state to a file (POY file ). The first,
      obligatory string argument specified the name of the POY file. The
      second, optional string argument specifies a string included in the POY
      file. POY files are not intended for permanent storage: they are
      recommended for temporary storing of a POY session by a user,
      checkpointing the current state of a search to avoid loss work in case
      the computer or the program itself fails, or to report bugs. POY will
      also automatically generate the file in many cases when a terminating
      error occurs (an important exception is out-of-memory errors ). 
    
    Examples
      
      save ("alldata. poy") 
        This command stores all the memory contents of the program in the
        file alldata. poy located in the current working directory, as
        printed by pwd () . 
      
      save ("alldata. poy", "My total evidence data") 
        This command performs the same operation as described in the example
        above, but, in addition, it includes the string My total evidence
        data to the file alldata. poy, which can later be retrieved using the
        command inspect(see help (inspect)) . 
      
      save ("/Users/andres/test/alldata. poy", "My total evidence data") 
        This command performs the same operation is the command described
        above with the important difference that the file alldata. poy
        generated in the directory /Users/andres/test/ instead of the current
        working directory. 
      
      
    
    See Also
      
      inspect load 
    
  
Information :
search :
  
    Description
      
      The command search implements a default strategy for a driven search.
      The command integrates build , transform , and swap commands for an
      efficient initial search. Tree building and swapping are executed under
      default settings; the transform provides an option of making sequential
      transformations of characters that substantially speeds up the search,
      however, at the expense of accuracy in calculating tree cost. The
      arguments are optional and their order is arbitrary. Even though the
      entire sequence of the commands can also be specified by setting
      build , transform , and swap individually to corresponding values, the
      advantage of using search command is that these steps are already
      predefined. 
    
    
    Arguments
      
      
        build [: BOOL ]
        Specifies either to build new trees (boolean value true) or to use
        the trees stored in memory (that is do not build new trees; boolean
        value false ). The default for build is false. Therefore, executing
        search under default settings will produce no result if there are no
        trees in memory. 
      
        transform [: BOOL ]
        Specifies to either transform characters as part of the search by
        sequential execution of commands auto_sequence_partition and
        auto_static_approx (both arguments of the command transform(see help
        (transform)) ) (boolean value true) or not (boolean value false ).
        This combination of character transformations substantially
        accelerates the search but at the expense of accuracy in calculating
        the exact tree cost. The default is false (characters are not
        transformed ). 
      
    
    
    Defaults
      
      build:true, transform:false 
      Under default settings, 10 trees are built, then subjected to branch
      swapping using alternating SPR and TBR, keeping one tree per swap (the
      default of swap ), and without transforming characters. 
    
    Examples
      
      search (build:true, transform:false) 
        This command builds 10 Wagner trees by random addition sequence (the
        default of build ), performs alternating SPR and TBR branch swapping
        and keeping one tree per swap (the default of swap ), and does not
        transform characters. Because the default of the argument
        transform is false, it can be omitted from the list of argument.
        Therefore this command is equivalent to search (build:true) . Note
        that if currently there are trees in memory, the new trees generated
        by search will replace them. 
      
      search (transform:true) 
        This command performs branch swapping on the existing trees in memory
        under default parameters of swap as shown in the examples above. The
        searches are performed on characters transformed using sequential
        application of transform arguments auto_sequence_partition and
        auto_static_approx to speed up the swapping procedure. 
      
      
    
    See Also
      
      build swap transform 
    
  
Information :
select :
  
    Description
      
      Specifies a subset of terminals, characters, and/or trees from those
      currently loaded in memory to use in subsequent analysis. 
    
    
    Arguments
      
      
      Select terminals and characters 
        Specifies terminals and/or characters to be used in subsequent
        analysis. The selection is based on terminal and character names and
        the naming conventions are shared between both classes. The arguments
        in this group specify whether terminals or characters are being
        selected. Identifiers are used to specify which specific characters
        or terminals are being selected, either by listing their names or
        importing a file containing a list of terminals or characters (see
        the Character and terminal identifiers argument group below for the
        description of methods for selecting specific terminals or characters
        ). By default, POY assumes that the specification refers to
        terminals. For example, to analyze only those terminals listed in the
        file opiliones using the character data currently loaded in memory,
        use the command 
         select (files: ("opiliones" )) . This command is equivalent to 
         select (terminals, files: ("opiliones" )) . When the command is
        executed, the list of selected terminals is printed on screen.
        terminals is only valid as an argument of commands select and
        rename . 
        Note that once specific terminals and/or characters are selected, the
        excluded data cannot be restored. To be able to reconstitute the
        original data set or to experiment with various character and
        terminal selections within a given POY session, use the commands  and
        use(see help (use)) . 
        
          terminals 
          Specifies that subsequently listed identifier (s) refer to
          terminals to be selected. 
        
          characters 
          Specifies that subsequently listed identifier (s) refer to
          characters to be selected. 
        
          STRING 
          Selects terminals listed in the file specified by string argument. 
        
      
      Character and terminal identifiers 
        
          all 
          Specifies all characters or terminals. 
        
          names : (STRING list) 
          Specifies the names of the characters or terminals. 
        
          codes : (STRING list) 
          Specifies the codes of characters or terminals. The codes are
          unique numbers that are generated by POY when data files are first
          imported. The codes can be reported using the argument data(see
          help (data)) of the command report . The codes are generated anew
          when a given data file is reloaded; therefore, they can effectively
          be used only within a current POY session. 
        
          files : (STRING list) 
          Specifies the filename list containing lists of terminals or
          characters. 
        
          missing : INTEGER 
          Selects terminals or characters to be included in the analysis
          based on the level of missing data. The integer value sets the
          minimum percentage of missing data. Terminals or characters that
          have more missing data than defined by the value are included in
          the analysis. 
        
          not_missing : INTEGER 
          Selects terminals or characters to be included from the analysis
          based on the relative of missing data. The integer value sets the
          minimum percentage of missing data. Terminals or characters that
          have less missing data than defined by the value are included in
          the analysis. In effect, this selects a complement of data to the
          argument missing. 
        For dynamic homology characters, the missing data refers to sequence
        fragments, whereas for static characters it refers to individual
        nucleotide positions. Therefore, when excluding terminals with
        missing data, the resulting set of selected terminals depends on the
        character type might, or might not, be identical. For example, if a
        data file (containing sequences corresponding to a single fragment)
        includes a very short sequence, this sequence is not treated as
        missing data regardless of its length. This is because in the context
        of dynamic homology a fragment, rather than an individual nucleotide
        position, constitutes a character. On the other hand, if the same
        data are treated as static characters, the taxon represented by a
        very short sequence might be excluded if the length of the sequence
        exceeds the threshold defined by the value of missing. 
        
          static 
          Specifies the static homology characters. 
        
          dynamic 
          Specifies the dynamic homology characters. 
        
          not names : (STRING list) 
          Specifies the characters or terminals other than those the names of
          which are listed in the string list. 
        
          not codes : (STRING list) 
          Specifies the characters or terminals other than those the codes of
          which are listed in the string list. 
        
      
      Select trees 
        Selects trees from the pool of trees currently in memory.
        
          optimal 
          Selects all trees of minimum cost. 
        
          best : INTEGER 
          Selects the number of best trees specified by the integer value.
          Best trees are not equivalent to optimal trees because best trees
          can include suboptimal trees within in case the value of best
          exceeds the number of optimal (minimal-cost) trees. If the number
          of optimal trees exceeds the value of best, only a subset of
          optimal trees (equal to the value of best is selected in
          unspecified order ). 
        There is no special command in POY to clear trees from memory.
        However, selecting zero best trees using the command
        select (best:0) effectively removes all trees currently stored in
        memory. 
        
          within : FLOAT 
          Selects all optimal and suboptimal trees the costs of which do not
          exceed the current optimal cost by the float value. For example, if
          the current optimal cost is 507 and the float value of within is 3.
          0, all trees with costs 507--510 are selected. 
        
          random : INTEGER 
          Randomly selects the number of trees specified by the integer value
          irrespective of cost. 
        
          unique 
          Selects only topologically unique trees (after collapsing
          zero-length branches) irrespective of their cost. 
        
      
    
    
    Defaults
      
      unique, optimal 
      By default POY selects all unique trees of optimal (best) cost. The
      rest of the trees are removed from memory. 
    
    Examples
      
      select (terminals, names: ("t1", "t2", "t3", "t4", "t5" ), 
       characters, names: ("chel. aln:0" )) 
        This commands selects only on terminals t1, t2, t3, t4, and t5 and
        use data only from the fragment 0 contained in the file chel. aln. 
      
      select (terminals, missing:50) 
        This commands excludes from subsequent analysis all the terminals
        that have more than 50 percent of characters missing. The lists of
        included and excluded terminals is automatically reported on screen. 
      
      select (optimal) 
        Selects all optimal (best cost) trees and discards suboptimal trees
        from memory. The pool of optimal trees might contain duplicate trees
        (that can be removed using unique ). 
      
      select (unique, within:2. 0) 
        This command selects all topologically unique optimal and suboptimal
        trees the cost of which does not exceed that of the best current cost
        by more than 2. For example, if the best current cost is 49, all
        unique trees that fall within the cost range 49--51 are selected. 
      
      
    
    See Also
      
      characters transform 
    
  
Information :
set :
  
    Description
      
      Changes the settings of POY. This command performs diverse auxiliary
      functions from setting the seed of the random number generator to
      selecting a terminal for rooting output trees. There is no default
      setting for set and the order of its arguments is arbitrary. 
    
    
    Arguments
      
      
      Application settings 
        Some generic application settings. Have no effect in the analyses
        themselves.
        
          history : INTEGER 
          Sets the size of the POY output history displayed in the POY Output
          window to the number of lines specified by the integer value. The
          size of the history must be greater than zero. This command has
          effect only in the ncurses interface. The default size of the
          output history is 1000 lines. 
        
          log : STRING 
          Directs a copy of a partial output to the file specified by the
          string argument. The output includes the information in the POY
          Output, Interactive Console, and State of Stored Search windows of
          ncurses interface. Timers and current state of the search are not
          included in the log. If the file already exists, POY will append
          the text to it; if the file does not exist, then POY creates a new
          file. If the user would like to delete the contents of a
          preexisting file, then the argument log:new:"logfile" creates a new
          initially empty file named logfile. 
        
          nolog 
          Stops outputting the log to any previously selected file. See log. 
        
          root : LIDENT 
          Specifies the terminal with with the the output trees are rooted.
          The terminal can either be indicated as a taxon name (a STRING,
          which must appear in quotes, such as "Genus_species") or the code,
          that is automatically assigned to the taxon by POY at the beginning
          of each POY session (for example, set (root:45) . The codes can be
          obtained using the command report (data) ). The terminal codes,
          however, are unique only within a current session. 
        
      
      Cost Calculation 
        Intensity of the tree cost estimation routines. All these arguments
        are mutually exclusive: only the last to appear in a set command will
        be used.
        
          normal_do 
          Applies a standard Direct Optimization algorithm for the tree cost
          estimation. This is the default and fastest technique. 
        
          exhaustive_do 
          Applies a starndard Direct Optimization algorithm for the tree cost
          estimation. The difference with normal_do is that the calculation
          of the tree costs during a search are much more intense, always
          looking for the best possible alignment for every single topology
          (instead of a lazy and greedy strategy used by the normal_do ). 
        
          iterative 
          Applies the iterative pass optimization in the tree cost
          calculations. This improves the tree cost estimation but at the
          expense of a tremendous execution time. Use at the very end to
          polish the final set of trees and perform a final search. 
        Due to the complexity of heuristics of the iterative pass
        optimization, there is no guarantee that the tree cost recovered from
        the search would be exactly the same as produced by the diagnosis of
        the same tree. However, the cost of the tree found during the search
        can be verified by outputting the medians from the diagnosis
        (diagnosis(see help (diagnosis)) ) (see and determining edge costs by
        hand. The cost of the tree found during the search might differ from
        that obtained by the rediagnosing the same tree (see rediagnose(see
        help (rediagnose)) ), but will recover the same tree costs in
        subsequent rediagnoses. cost. 
      
      Randomized routines 
        
          seed : INTEGER 
          Sets the seed of the random number generator to the argument's
          value. If unspecified, POY uses the system's time as seed. It is
          reported when the program starts. 
        It is critical to set a seed value to insure reproducibility of the
        results of the analyses that require randomization routines (such as
        tree building ). 
      
    
    
    Defaults
      
      
      If no argument are given, the command does nothing. 
    
    Examples
      
      set (history:1500, seed:45, log:"mylog. txt") 
        This command increases the size of the history in the ncurses
        interface to 1500 lines, sets the random number generator to 45, and
        initiates a log file mylog. txt, located in the current working
        directory, as printed by the command pwd () . 
      
      set (root:"Mytilus_edulis" ) 
        This commands selects terminal Mytilus_edulis as a root for output
        trees. 
      
      
    
    See Also
      
      report 
    
  
Information :
store :
  
    Description
      
      Stores current state of POY session in memory. The stored information
      includes character data, trees, selections, everything. Specifying the
      name of the stored state of the search (using the string argument) does
      not, however, generate a file under this name that can be examined; the
      name is used only to recover the stored state using the command 
      use . In combination with use , the command store is extremely useful
      when exploring alternative cost regimes and terminal sets within a
      single POY session. 
    
    
    Arguments
      
      
        STRING 
        Specifies the name of the stored search state of the current POY
        session. 
      
    
    Examples
      
      store ("initial_tcm" ) 
       transform (tcm: (1, 1 )) 
       use ("initial_tcm" ) 
        The first command, store , stores the current characters and trees
        under the name initial_tcm. The second command, transform , changes
        the cost regime of molecular characters, effectively changing the
        data being analyzed. However, the third command, use , recovers the
        initial state stored under the name initial_tcm. 
      
      
    
    See Also
      
      use transform 
    
  
Information :
swap :
  
    Description
      
      swap is the basic local search function in POY. This command implements
      a family of algorithms collectively known as branch swapping in
      systematics and as hill climbing in combinatorial optimization. They
      proceed by clipping parts of a given tree and attaching them in
      different positions of the same tree. It can be used to perform a local
      search in the set of trees loaded in memory. Swapping is performed on
      all trees in memory. During search, swap collects information about the
      visited trees and perform various kinds of checkpoints to reduce
      information loss in case if POY crashes. swap is also used as an
      argument for other commands to specify a local search strategy in other
      contexts, for example, in calculating support values using the command
      calculate_support(see help (calculate_support)) . All arguments of
      swap are optional and their order is arbitrary. 
    
    
    Arguments
      
      
      Neighborhood 
        The basic standard procedures for local search in phylogenetic
        analysis are SPR and TBR  . The arguments in this group define the
        parameters of these methods. The nearest-neighbor interchanges (NNI)
        swapping strategy is implemented by combining the arguments spr and
        sectorial (see Join method group of arguments) :
        swap (spr, sectorial:1) .
        
          alternate 
          Performs spr and tbr swapping iteratively until a local optimum is
          found. This is a specific strategy of performing tbr, as the trees
          visited by spr are a subset of those visited by tbr. 
        
          spr [: once ]
          This argument performs spr swapping, starting from the current
          trees in memory and subsequently repeating the SPR procedure until
          a local optimum is found. If the optional value once is specified,
          spr will stop once the first tree with better cost is found. 
        
          tbr [: once ]
          This argument performs tbr swapping, starting from the current
          trees in memory and subsequently repeating the TBR procedure until
          a local optimum is found. If the optional value once is specified,
          tbr will stop once the first tree with better cost is found. 
        
      
      Trajectory 
        The following arguments define the direction of the search in the
        defined neighborhood.
        
          around 
          Similar to current_neighborhood, this argument changes the
          trajectory of a search, by completely exploring the neighborhood of
          the current tree in memory, and choosing the best swap position
          among in this neighborhood first before continuing. The default in
          POY is to choose the first one available that shows a better cost
          than the current best. 
        
          annealing : (FLOAT, FLOAT) 
          Uses simmulated annealing  . If the argument's value is $ (a, b) $,
          POY accepts a tree with cost $c$ when the best known tree has cost
          $d$ with probability $ $, where $t = a $, and $i$ is the number of
          tree evaluated in the local search. 
        
          drifting : (FLOAT, FLOAT) 
          Uses POY drifting function  . If the argument's value is $ (a, b)
          $, then POY always accepts a tree with better cost than the current
          best, with probability $a$ a tree with equal cost, and with
          probability $1 / b + d$ a tree with cost $d$ greater than the
          current best. 
        
      
      Branch break order 
        During the local search, a branch is broken and local branch swapping
        is performed (see Neighborhood group of arguments ), the precise
        choice of which branches should be broken first can affect both the
        speed and the local optimum found by the program. The following
        commands select among the different strategies available in POY.
        
          once 
          Breaks each edge only once during a local search; that is, if a
          broken edge does not yield a better tree, it is never broken again,
          no matter how many changes occur in the tree. 
        
          randomized 
          Chooses edges uniformly at random for breakages. 
        
          distance 
          Gives higher priority to those edges with biggest length. 
        
      
      Join method 
        After breaking a tree (using SPR or TBR ), the following arguments
        control the selection of the positions to join the broken clades.
        
          constraint [: INTEGER | (depth: INTEGER, file: STRING) ]
          The constraint argument for the swap command sets constraints on
          the join locations during the search using an input tree using both
          a tree and an optional maximum distance from the break branch. Only
          sets defined either in the input file, or in the strict consensus
          of the files in memory will be attempted to produce during
          swapping. An integer value of depth specifies the maximum distance
          from the break branch to attempt joins. A string value of file
          specifies an input file containing a singe tree that defines
          topological constraints. Under default settings, constraint will
          use a consensus tree from the files in memory and perform swapping
          with the value of depth set to 0 (no maximum distance is specified
          ). 
        
          all [: INTEGER ]
          Turn off all preference strategies to make a join, simply try all
          possible join positions for each pair of clades generated after a
          break. 
        
          sectorial [: INTEGER ]
          Do not join in edges at distance greater than the value of the
          argument from the broken edge, where the distance is the number of
          edges in the path connecting them. If no argument is given, then no
          distance limit is set. 
        
      
      Reroot order 
        During TBR, the following options control the order of the rerooting.
        
          bfs [: INTEGER ]
          Reroots using breath first search  from the broken edge, within the
          arguments value distance from the root of the clade. If no value is
          given, there is no limit distance for the rerooting. By default,
          bfs is used with no limit distance for the rerooting. 
        
      
      Trajectory samples 
        During the search, POY visits a large number of trees. For some
        applications it might be desirable to collect information about the
        trees examined during a search: for example, to provide backups of
        the state of a search (in an unlikely crash ), or to examine the
        characteristics of the alignments. The difference from the
        swap arguments is that the user can choose any combination of
        trajectory samples, and they will all can be used during the search.
        None of the trajectory samples is used by default.
        
          recover 
          Stores the current best tree in memory that can be recovered it
          case of failure. If it is necessary to recover such trees after an
          aborted command, use the command  recover(see help (recover)) . If
          the program terminates normally, the stored trees are exactly those
          produced at the end of the swap . Using recover, however, requires
          twice as much memory compared to swapping without it. 
        
          timeout : INTEGER 
          Specifies the number of seconds after which branch swapping isl
          stopped. Use this argument in association with recover to keep the
          best trees found up to n seconds after starting the search. 
        
          timedprint : (INTEGER, STRING) 
          timedprint: (n, "trees. txt") will print the current best tree in
          memory to the file trees. txt, at least every n seconds. However,
          POY typically underestimates the amount of time and, therefore, the
          samples can be slightly sparcer. timedprint can only be used in
          combination with the argument recover. This argument requires the
          argument recover to be specified. 
        
          trajectory [: STRING ]
          trajectory:"better. txt" will store every new tree found with a
          better score during the local search in the file better. txt. The
          string is the filename where the trajectory is to be stored, which
          is optional (indicated by brackets); if not added, the trees are
          printed in the standard output (flat interface) or the output
          window (ncurses interface ). 
        
          visited [: STRING ]
          visited:"visited. txt" will store every visited tree and its cost
          during the local search in the file visited. txt. The (optional)
          string is the filename where the trajectory is to be stored. If not
          included, the trees are printed in the standard output (flat
          interface) or the output window (ncurses interface ). 
        
      
      Tree selection 
        As the tree search proceeds, a tree may or may not be selected to
        continue the search or to return as a result. The following arguments
        determine under what conditions can a tree be acceptable during the
        search.
        
          threshold : FLOAT 
          Sets the percentage cost for suboptimal trees that are more
          exhaustively evaluated during the swap, meaning that trees within
          the threshold are subject to an extra round of swapping. For
          example, if the current optimal tree has cost 450, and threshold:10
          is specified, trees with cost at most 495 are swapped. threshold is
          equivalent to slop of POY3. 
        
          trees : INTEGER 
          Maximum number of best trees that are retained in a search round,
          per tree in memory. 
        
      
    
    
    Defaults
      
      trees:1, alternate, threshold:0, bfs 
      By default, current trees are submitted to a round of SPR followed by
      TBR using breath first search under default setting, and keeping one
      best tree per each starting tree. 
    
    Examples
      
      swap () 
        This command performs swapping under default settings. 
      
      swap (trees:5) 
        Submits current trees to a round of SPR followed by TBR. It keeps up
        to 5 minimum cost trees for each starting tree. 
      
      swap (transform (( all, static_approx ))) 
        Submits current trees to a round of SPR followed by TBR, using static
        approximations for all sequence characters. 
      
      swap (trees:4, transform (( all, static_approx ))) 
        Submits current trees to a round of SPR followed by TBR, using static
        approximations for all characters, keeping up to 4 minimum cost trees
        for each starting tree. 
      
      swap (constraint: (depth:4 )) 
        Calculates a consensus tree of the files in memory and uses it as
        constraint file, then joins at distance at most 4 from the breaking
        branch. This is equivalent to swap (constraint: (4 )). 
      
      swap (constraint: (file:"bleh" )) 
        Reads the tree in file bleh and use it as constraint for the search.
        This is equivalent to swap (constraint: ("bleh" )). 
      
      swap (constraint: (file:"bleh", depth:4 )) 
        Uses the tree in the file bleh as a constraint tree and joins at
        distance at most 4 from the breaking branch during the swap. 
      
      swap (recover, timedprint: (5, "timedprint. txt" )) 
        Saves the current best tree to file timedprint. txt every 5 seconds. 
      
      
    
    See Also
      
      transform 
    
  
Information :
transform :
  
    Description
      
      Transforms a character or a list of characters from one type into
      another type. This includes changing in costs for indels and
      substitution, modifying character weights, converting dynamic into
      static homology characters, and transforming nucleotide into
      chromosomal (and vise versa) characters among other operations. The
      essential arguments of the command transform include identifiers and
      methods. The methods specify what type of transformation is applied to
      the set of characters specified by identifiers as defined in the
      description of the command  select(see help (select)) . Identifiers and
      methods are included in parentheses and separated by a comma. It is
      important to remember that only identifiers of characters (such as
      names, codes, among others) can be used. The parentheses separate these
      essential arguments from all other optional arguments that might be
      included in the list. Thus, if only identifiers and methods are
      specified, the argument list of transform is included in double
      parentheses. For example, the command
      transform (( all, gap_opening:1 )) contains only an identifier (all)
      and a method (gap_opening ). Minimally, only methods can be specified;
      in that case, the transformation is applied to all characters to which
      the transformation method can be applied and only a single set of
      parentheses is used. For instance, transform (gap_opening:1 ) , where
      gap_opening defines the transformation method. There are no default
      values for transform , that is if no methods are specified
      (transform () ), the command does nothing. 
    
    
    Arguments
      
      
      Identifiers 
        Identifiers specify which characters are transformed. Only
        identifiers of characters (not terminals) can be used. If identifiers
        are omitted, the transformation to is applied to all applicable
        characters. For example, transform (( all, tcm: (1, 1 ))) is
        equivalent to transform (( tcm: (1, 1 ))) . See the command 
        select(see help (select)) for detailed description of identifiers. 
      
      Methods 
        This set of arguments specifies different transformations that can be
        applied to selected characters. If multiple transformation methods
        are applied sequentially in the same list of arguments, the effect of
        the methods listed earlier might be altered or canceled by methods
        listed after that. Thus, caution must be used in designing complex
        strategies with multiple character transformations. See the note on
        command order (Section  ).
        
          auto_static _approx
          Evaluates each loaded fragment and, if the number of indels appear
          to be low and stable between topologies, then the character is
          transformed to the equivalent character using static homologies
          with the implied alignment  . If no characters are specified (using
          identifiers ), all sequence fragments are evaluated. This method
          greatly accelerates searching. 
        
          auto_sequence _partition
          Evaluates each fragment and if a long region appears to have no
          indels, then the fragment is broken inside that region. Any number
          of partitions can occur along a fragment. Fragmenting long
          sequences greatly accelerates searching. 
        
          fixed_states 
          Transforms the characters specified in fixed state characters  with
          distances equal to the edition distance between their observed
          values. By default, the application of fixed_states transforms all
          molecular characters. To specify a subset of characters, an
          identifier must be used in conjunction with fixed_states. 
        
          gap_opening : INTEGER 
          Sets the cost of opening a block of gaps to the specified value.
          Note that this cost is in addition to the standard cost of the
          insertion as specified by a given transformation cost matrix. The
          default in POY is not to have extension gap cost (gap_opening:0 ).
          If the gap opening cost is $a$, and $indel (x) $ is the cost cost
          of inserting (or deleting) a base $x$ according to the tcm assigned
          to the character, the total cost of inserting (or deleting) the
          sequence $s [0 ... n] $ is $a + tcm (s [0 ]) + tcm (s [1 ]) + ... +
          tcm (s [n - 1 ]) + tcm (s [n ]). $ 
        
          multi_static _approx
          Calculates the implied alignment for each tree in memory and
          convert them to static homology characters using the alignment's
          cost regime. The new character set will be the union of all those
          characters generated for all the trees  . This option is intended
          only for heuristic search purposes. 
        
          prealigned 
          Treats the sequences as prealigned and uses the cost regime
          according to the specified transformation cost matrix. All other
          cost parameters are ignored (including affine gap costs ). 
        
          static_approx [: LIDENT ]
          Transforms the sequences to the static homology characters
          corresponding to their implied alignments and their transformation
          cost matrix  . The resulting characters and their number will vary
          depending on the characteristic of transformation cost matrix
          assigned to each sequence. For example, if the cost of both
          substitutions and indels is 1, then one non-additive character is
          created per each homologous position in the implied alignment. If
          the cost of substitutions is 1 and the cost of indels is 2, then
          one character is created for each homologous position, and one
          extra character for each homologous position with gaps. In more
          complex cases, a Sankoff character is created. The lident value
          remove excludes all uninformative characters information (except
          autapomorphies ), whereas the value keep retains these characters.
          The default is remove. 
        The transformation of dynamic into static homology characters cannot
        be reverted. Therefore, caution must be taken when the transformation
        is applied. For example, if sequence characters have been transformed
        into static characters to calculate jackknife or bootstrap support
        values based on sampling of individual nucleotides, all commands
        executed subsequently will be applied to the transform data. 
        It is important to remember that the local optimum for the dynamic
        homology characters can differ from that for the static homology
        characters based on the same sequence data. Therefore, performing
        additional searches on the transformed data (for example, in
        calculating support values based on individual nucleotides rather
        than on sequence fragments) can produce a discrepancy in tree costs. 
        
          trailing_insertion : STRING / (INTEGER list) 
          The tail and prepend costs specify the cost of having an insertion
          of each element in the alphabet at the beginning or end of a
          sequence. The string is the name of a file containing the cost of a
          trailing insertion corresponding to each of the elements in the
          alphabet separated by spaces. The last element in the list is the
          cost of the indel of a gap (should be 0 ). Instead of a file, the
          list can be the input of the argument, in the same order, separated
          by commas. Synonym of the argument ti. 
        
          trailing_deletion : STRING / (INTEGER list) 
          The tail and prepend costs specify the cost of having a deletion of
          each element in the alphabet at the beginning or end of a sequence.
          The string is the name of a file containing the cost of a trailing
          deletion corresponding to each of the elements in the alphabet
          separated by spaces. The last element in the list is the cost of
          the indel of a gap (should be 0 ). Instead of a file, the list can
          be the input of the argument, in the same order, separated by
          commas. Synonym of the argument td. 
        
          tcm : (INTEGER, INTEGER) 
          Defines transformation cost matrix. The first integer value
          specifies substitution cost, the second integer value defines indel
          cost. By default, the cost of substitution is 1, and the cost of an
          indel is 2 (tcm: (1, 2) ). 
        
          tcm : STRING 
          Defines transformation cost matrix by importing a file (specified
          by the string value) that contains a user defined nucleotide
          transformation cost matrix. The transformation cost matrix file
          contains five rows and columns with values listed in the following
          order (left to right and top to bottom) : adenine, cytosine,
          guanine, thymine/uracil, and indel. The costs must be symmetrical
          (that is, the cost of the A to T substitution is equal to the cost
          of T to A substitution ). For example:
          
            0 2 1 2 4 
             2 0 2 1 4 
             1 2 0 2 4 
             2 1 2 0 4 
             4 4 4 4 0 
          
            weight : argument 
            Changes the cost of specified characters by a constant value
            (weight) which is specified by either a float or an integer
            value. 
        
          weightfactor : argument 
          Changes the cost of specified characters by a multiplicative factor
          (weight factor) which is specified by either a float or an integer
          value. 
        
      
      Chromosomal transformation methods 
        For chromosome and genome character types, POY optimizes nucleotide-,
        locus-, and chromosome-level variation simultaneously. The arguments
        in this group transform nucleotide characters into chromosomal
        character to allow for translocations, inversions, and indel events
        at the locus-level in a chromosome and chromosome level in a genome.
        Functions to calculate breakpoint and inversion distances between two
        sequences of gene orders are taken from GRAPPA, Genome Rearrangements
        Analysis under Parsimony and other Phylogenetic Algorithms, available
        at 
         http://www. cs. unm.   moret/GRAPPA/.
        
          breakinv_to _seq
          Transforms breakinv character type into custom_alphabet character
          type. This transformation prevents the use of rearrangement
          operations. 
        
          seq_to _breakinv: ([ argument list ]) 
          Transforms custom_alphabet character type into breakinv character
          type to allow for rearrangement operations (translocations and
          inversions; duplications are not currently supported ). This
          argument is useful, for example, when custom_alphabet characters
          are used to define a sequence of individual genes and once is
          interested in detecting potential change in their order on a
          chromosome. See the command  read(see help (read)) for the
          description on how to load a custom alphabet and breakinv character
          types. The optional list of arguments includes the arguments of the
          dynamic_pam that can also be specified subsequently, as a separate
          step, using the argument dynamic_pam. 
        
          seq_to _chrom: ([ argument list ]) 
          Transforms nucleotide type data into 
           chromosome type data to allow rearrangements, inversions, and
          locus-level indel operations. The chromosome-specific options (e.
          g. breakpoint, locus--insertion, and locus-deletion costs) can be
          specified by the argument dynamic_pam. If no dynamic_pam values are
          specified, its default values are applied. The optional list of
          arguments includes the arguments of the dynamic_pam that can also
          be specified subsequently, as a separate step, using the argument
          dynamic_pam. 
        
          dynamic_pam : ([ argument list ]) 
          Specifies parameters for creating chromosome- and genome-level HTUs
          (medians ). The argument values of dynamic_pam specify the method
          if calculating distance between pairs of chromosomes (inversion and
          breakpoint ), costs of locus-level events (inversion, breakpoint,
          locus_indel ), take into account whether the chromosome is linear
          or circular (circular ), and implement a number of heuristic
          procedures to accelerate computations when working with chromosome
          data type (seed_length, median, swap_med, rearranged_len, approx ).
          Under default settings, the distance between two chromosomes is
          calculated using breakpoint and the rest of the arguments are
          executed under their default settings. 
        Note that the arguments breakpoint and inversion are alternative
        methods of calculating distance between two chromosomes. Therefore,
        they cannot be used simultaneously. If both arguments are specified,
        the latter will be executed. The order of other arguments of
        dynamic_pam is arbitrary. 
        
          
            approx : BOOL 
            Approximates chromosome medians using a fixed-states approach.
            This is most useful to accelerating tree building and searching
            operations for large chromosomal data sets. The boolean value
            true applies the fixed-states optimization. The default value is
            false. 
          
            locus_breakpoint : INTEGER 
            Calculates the breakpoint distance  between two pairs of
            chromosomes given the cost for rearrangement specified by an
            integer value. The breakpoint distance takes into account
            rearrangements but not inversions. Note, that this argument
            cannot be used in conjunction with inversion. The default value
            of breakpoint is 10. 
          
            circular : BOOL 
            Specifies if chromosome is circular (boolean value true) or
            linear (boolean value false ). The default value of circular is
            false (linear chromosome ). 
          
            chrom_breakpoint : INTEGER 
            Calculates the breakpoint distance  between two sequences of
            multiple chromosomes given the cost for rearrangement specified
            by an integer value. The breakpoint distance takes into account
            locus rearrangements between non-homologous chromosomes
            (translocations) but not inversions. The default value of
            chrom_breakpoint is 100. 
          
            chrom_hom : FLOAT 
            Specifies the lower limit of distance between two chromosomes
            beyond which the chromosomes are not considered to be homologous.
            The default value of chrom_hom is 0. 75. 
          
            chrom_indel : (INTEGER, FLOAT) 
            Specifies the cost for insertion/deletion of a chromosome in
            analysis of multiple chromosomes. The integer value sets gap
            opening cost ($o$ ), whereas the float value sets gap extension
            cost ($e$ ). The indel cost for a fragment of length $l$ is
            specified by the following formula: $o + (l-1) e$. The default
            values are $o=10, e=1. 0$. 
          
            inversion : INTEGER 
            Calculates the inversion distance  between two chromosomes given
            the cost for inversion specified by the integer value. The
            inversion distance takes in consideration rearrangements and
            inversions. Note, that this argument cannot be used in
            conjunction with breakpoint. 
          
            locus_indel : (INTEGER, FLOAT) 
            Specifies the cost for insertion/deletion of a chromosome
            segment. The integer value sets gap opening cost ($o$ ), whereas
            the float value sets gap extension cost ($e$ ). The indel cost
            for a fragment of length $l$ is specified by the following
            formula: $o + (l-1) e$. The default values are $o=10, e=1. 0$. 
          
            median : INTEGER 
            Specifies the number alternative locus- and chromosome-level
            rearrangements of the best cost selected (randomly) for each HTU
            (median ). Limiting the number of rearrangements stored in memory
            (smaller value of median) is heuristic strategy to accelerate
            calculations at the expense of thoroughness of the search. By
            default, only 1 rearrangement is retained (the first one found ).
            If more than one rearrangement is specified, the selected number
            of rearrangements is selected in random order from the pool of
            all generated rearrangements. 
          
            seed_length : INTEGER 
            Specifies the minimum length of identical (invariant, completely
            conserved) contiguous sequence fragments during comparison
            between two chromosomes. The integer value of seed_length is the
            number of nucleotides. Correct identification of such fragments
            facilitates detecting chromosome rearrangement events and
            accelerates other operations (such as tree building and swapping
            ). However, if seed_length value is set too low (allowing for
            detection of short, multiple fragments that are likely to occur
            frequently in a genome) or if it is set too high (that might
            result in no identical fragments detected ), the speed of
            subsequent procedures can potentially decrease. The optimal
            parameters depend on specifics of a given dataset. The default
            value of seed_length is 9. 
          
            sig_block _len: INTEGER 
            Creates a pairwise alignment between two chromosomes and
            detecting conserved areas (``blocks'' ). However, only blocks of
            lengths (in number of nucleotides) greater or equal to the
            integer value of sig_block_len are considered as hypothetically
            homologous blocks and used as anchors to divide chromosomes into
            fragments. Increasing the value of sig_block_len decreases the
            chance of inferring small-size rearrangements. The default value
            is 100. 
          
            rearranged_len : INTEGER 
            Two seeds are said to be non-rearranged, if their distance is not
            greater than a predefined threshold $rearranged_len$ . In other
            words, it is unlikely that rearrangement operations can occur
            between two non-rearranged seeds if they are connected. The
            default value is 100 
          
            swap_med : INTEGER 
            Specifies the maximum number of swapping iterations to search for
            best pairwise alignment of two chromosomes taking into account
            locus-level rearrangement events. Limiting the number of swapping
            iterations accelerates the search at the expense of thoroughness.
            The default value is 1. 
          
      
    
    
    Defaults
      
      
      If no arguments are given, this command does nothing. 
    
    Examples
      
      transform (( all, tcm: (1, 1 ))) 
        Applies the transformation cost matrix (1, 1) to all characters,
        meaning that substitutions and gaps receive the same weight. 
      
      transform (( all, tcm:"molmatrix" )) 
        Applies the character transformation matrix "molmatrix" to all
        characters. 
      
      transform (( all, tcm: (1, 1 ))) 
        This command is equivalent to transform (( dynamic, tcm: (1, 1 ))) . 
      
      transform (tcm: (1, 1 ), gap_opening:1 ) 
        Applies the transformation cost matrix and the gap opening cost to
        all characters. In this example the cost for substitutions is 1, the
        gap opening cost is 2 (1 set by gap_opening + 1 set by tcm ), and the
        gap extension cost is 1 (set by tcm ). 
      
      transform (tcm: (2, 2 ), ti: (1, 1, 1, 1, 0 ), td: (1, 1, 1, 1, 0 )) 
        Assigns to all characters the symmetric transformation cost matrix
        with cost 2 for every indel and substitution, but for those
        insertions and deletions at the ends of the sequences, the cost
        assigned will only be 1. 
      
      transform (( static, weightfactor:2 )) 
        This command reweights all the static homology characters by a
        multiplicative factor of 2, while keeping the weighting scheme that
        has been specified before. 
      
      transform (( static, weight:4. 2 )) 
        Applies the same weight (a float value 4. 2) to all static homology
        characters. 
      
      transform (( dynamic, weight:4 )) 
        Applies the same weight (an integer value 4) to all dynamic homology
        characters. 
      
      transform (( all, tcm: (1, 1 )), (names: ("gen1", "gen2" ), 
       static_approx ), (names: ("gen3" ), tcm:"molmatrix" )) 
        Applies tcm (1, 1) to all characters, then applies static approx
        using that tcm to characters in files gen1 and gen2, and for file
        gen3, it invokes a different transformation cost matrix, contained in
        the file molmatrix. Beware that the file name should be exactly as it
        was reported with report (data ), which differs from the actual file
        name (report (data) reports files as fileX:N ). 
      
      transform (( all, tcm: (1, 1 )), (names: ("gen1:3", "gen2:10",
      "gen3:1", "gen4:5" ), static_approx ), (names: ("gen5", "gen6" ),
      tcm:"Molmatrix1" )) 
        Applies tcm (1, 1) to all characters, then applies static
        approximation to the sequence data contained in files gen1, gen2,
        gen3, and gen4 according to this transformation cost matrix, and
        applies the custom transformation cost matrix contained in the file
        Molmatrix1 to the sequence data contained in files gen5 and gen6. 
      
      transform (fixed_states ) 
        Transformed all sequence characters into fixed states characters. 
      
      transform (( names: ("gen1", "gen4" ), fixed_states )) 
        Transformed only specified sequence characters (gen1 and gen4) into
        fixed states characters. 
      
      transform (( all, seq_to _breakinv:())) 
        In this example all sequence data is transformed into breakinv data
        type under default settings of dynamic_pam. 
      
      transform (seq_to _chrom:(circular:true, locus_indel: (50, 1. 0 ))) 
        All applicable (i. e. sequence) data is transformed into chromosome
        data, which is treated as a circular chromosome, and settings
        locus-level gap opening cost at 50 and gap extension cost at 1. 0. 
      
      read (chromosome: ("mito" )) 
       transform (( all, dynamic_pam: (breakpoint:10, rearranged_len:60 ,
      median:1, circular:false ))) 
        This example shows a file read (``mito'') containing mitochondrial
        chromosome sequences that is transformed to set the breakpoint cost
        at 10, 60 or more nucleotides are necessary to allow rearrangement
        between 2 identified seeds, the number of median swap passes at 1,
        and the chromosomes are linear. 
      
      
    
  
Information :
use :
  
    Description
      
      Restores from memory the state of a POY session (that includes
      character data, selections, trees, and all other data and
      specifications) that had previously been saved during the session using
      the command  . The recalled session replaces the current session. The
      string argument specifies the name of the stored state. In combination
      with  , the command use is very useful for exploring alternative cost
      regimes and terminal sets within a single POY session. 
    
    Examples
      
      store ("initial_tcm" ) 
       transform (tcm: (1, 1 )) 
       use ("initial_tcm" ) 
        The first command, store , stores the current characters and trees
        under the name initial_tcm. The second command, transform , changes
        the cost regime of molecular characters, effectively changing the
        data being analyzed. However, the third command, use , recovers the
        initial state stored under the name initial_tcm. 
      
      
    
    See Also
      
      store transform 
    
  
Information :
version :
  
    Description
      
      Reports the POY version number in the output window of the ncurses
      interface, or to the standard error in the flat interface. 
    
    Examples
      
      version () 
        
      
      
    
  
Information :
wipe :
  
    Description
      
      Elminates the data stored in memory (all character data, trees, etc. ). 
    
    Examples
      
      wipe () 
        
      
      
    
  
Information : 
                Trees:
                  Storing 0 trees 
Information :
build :
  
    Description
      
      Builds Wagner trees  . The arguments of the command build specify the
      number of trees to be generated and the order in which terminals are
      added during a singe tree building procedure. The sequence of taxon
      addition can either be random or correspond to the order of terminals
      as they are listed in the first imported datafile. During tree
      building, POY reports in the Current Job window of the ncurses
      interface which of the terminal addition strategies is currently used.
      Building multiple trees with a randomized addition of terminals allows
      for the evaluation of many more possible tree topologies and generates
      a diversity of trees for subsequent analysis. By default POY replaces
      the trees stored in memory with those generated in a subsequent build.
      For example, executing build (10) followed by build (20) will replace
      10 trees generated during the first build with 20 new trees. However,
      it might be desirable (for example, if computer memory were limited) to
      generate a large number of trees by appending trees from multiple
      separate builds. To keep trees from consecutive builds, a tree output
      file must be specified using  report(see help (report)) that must
      precede the subsequent build command. This will produce a file
      containing the trees appended from all builds. Alternatively, trees
      from different builds can be redirected to separate files if different
      file names are specified. The command build is also used as an argument
      for the command calculate_support . 
    
    
    Arguments
      
      
        as_is 
        Indicates that in one of the trees to be built, the terminals are
        added in the order in which they appear in the first imported
        datafile, and all others are built using a random addition sequence. 
      
        branch_and _bound[: FLOAT ]
        Calculates the exact solution using the branch and bound algorithm  .
        By default only one optimal tree is kept but the number of optimal
        trees to be retained can be specified by the argument trees. The
        optional float value specifies the bound (either tree cost or
        likelihood score. Instead of building a tree the default heuristic
        method, 
      
        constraint [: STRING ]
        Builds trees using the set of constraints contained in the input
        file. If no input file is provided, the constraint is calculated as
        the strict consensus of the trees held in memory. Every tree built
        using this method is subjected to the same randomization as wagner
        builds within each constraint. 
      
        random 
        Generate a tree at random. All possible trees have equal probability. 
      
        randomized 
        Indicates that terminals are added in random order on every Wagner
        tree built. 
      
        trees : INTEGER 
        The integer value specifies the number of independent, individual
        Wagner tree builds. The label trees is optional: it is sufficient to
        specify only the integer without the trees label. Therefore,
        build (5) is equivalent to build (trees:5) . Note that trees is also
        used as an argument of the command  swap(see help (swap)) but with
        different meaning. The value 0 generates no trees, but, unlike other
        values, it retains all trees in memory instead of eliminating them.
        This is useful, for example, in the bremer(see help (bremer)) support
        calculation, where instead of generating new trees per each node, the
        searches are performed on the trees in the neighborhood of the
        current trees in memory. 
      
        INTEGER 
        The integer argument specifies the number of independent, individual
        Wagner tree builds. This is a shortcut of the argument trees. 
      
        of_file : STRING 
        Imports tree file included in the file path of the argument. This
        command is useful for importing starting trees for calculating
        bremer(see help (bremer)) support. In other contexts the command
        read(see help (read)) is used. 
      
        STRING 
        This is a shortcut of the argument of_file. 
      
        all 
        Turns off all preference strategies to make a join, simply try all
        possible join positions for all terminals added. 
      
    
    
    Defaults
      
      trees:10, randomized 
      By default, POY will build 10 trees using a random addition sequence
      for each of them. 
    
    Examples
      
      build (20) 
        Builds 20 Wagner trees randomizing the order of terminal addition
        (note that since random is the default, it is not written ). 
      
      build (trees:20, randomized) 
        A more verbose version of the previous example. By default a build is
        randomized, but in this case the addition sequence is explicitly set.
        For the total number of trees, instead of simply specifying 20, we
        use the label trees (this might be desirable to improve a script's
        readability ). 
      
      build (15, as_is ) 
        Builds the first Wagner tree using tree using the order of terminals
        in as they are listed in the first imported datafile and generates
        the remaining 14 trees using a random addition sequence. 
      
      build (branch_and _bound, trees:5) 
        Builds trees using branch_and _boundmethod and keeps up to 5 optimal
        trees in memory. 
      
      
    
  
Information : 
                Trees:
                  Storing 0 trees 
Information :
fuse :
  
    Description
      
      Performs Tree Fusing on the trees in memory. Tree Fusing is a genetic
      algorithm technique that allows the escaping the local optimum by
      exchanging clades with identical composition of terminals between pairs
      of trees. Only one pair of trees is evaluated during a single
      iteration. The size of the clades being exchanged is not determined. 
    
    
    Arguments
      
      
        keep : INTEGER 
        Specifies the maximum number of trees to be kept between iterations.
        By default, the number of trees retained is the same as the number of
        starting trees. 
      
        iterations : INTEGER 
        Specifies the number of iterations of tree fusing to be performed.
        The number of iterations is effectively the number of pairwise clade
        exchanges. The default number of iterations is four times the number
        of retained trees (as specified by keep ). 
      
        replace : argument 
        Specifies the method for tree selection. Acceptable values are: 
        
          [better] Replaces parent trees with trees of better cost produced
          during a fusing iteration. [best] Keeps a set of trees of the best
          cost regardless their origin. 
        The default is best. 
      
        swap 
        Specifies tree swapping strategy to follow each iteration of tree
        fusing. No swapping is performed under default settings. See the
        command  swap(see help (swap)) . 
      
    
    
    Defaults
      
      replace:best 
      By default POY performs fusing keeping the same number of trees per
      iterations as the number of the starting trees. The number of
      iterations is four times the number starting trees. During the
      procedure, only the best trees are retained. No swapping is performed
      subsequent to tree fusing. 
    
    Examples
      
      fuse (iterations:10, replace:best, keep:100 swap ()) 
        This command executes the following sequence of operations. In the
        first iteration, clades of the same composition of terminals are
        exchanged between two trees from the pool of the trees in memory. The
        cost of the resulting trees is compared to that of the trees in
        memory and a subset of the trees containing up to 100 trees of best
        cost is retained in memory. These trees are subjected to swapping
        under the default settings of swap . The entire procedure is repeated
        nine more times. 
      
      fuse (swap (constraint )) 
        This command performs tree fusing with modified settings for swapping
        that follows each iteration. Once a given iteration is completed, a
        consensus tree of the files in memory is computed and used as
        constraint file for subsequent swapping (see the argument
        constraint(see help (constraint)) of the command swap ). 
      
      
    
    See Also
      
      swap 
    
  
Information : 
                Trees:
                  Storing 0 trees 
PASSED